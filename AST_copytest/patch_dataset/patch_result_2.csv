Project,URL,SHA,polluter,cleaner,victim,copy_can_work,md5_record,patch1,patch2,patch3,patch4
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_mudobjects.py::TestDoorsExits::test_go_through_exit,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,b5fe668ed61762368f297b7c81e7f82d,False
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_mudobjects.py::TestDoorsExits::test_linked_door_pair,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,c2fded41d2c6bd1ba5d9233399c1adfc,False
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_mudobjects.py::TestLiving::test_do_verb,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,d775bd466b3fdc32364d252f7d40e1e6,False
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_mudobjects.py::TestLiving::test_tell,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,d263a7ffdbc552c24f0fe0075954e0df,False
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_player.py::TestPlayer::test_wiretap,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,d40368455737d1fe65c0fdbd8bbaee44,True,"
attic = Location('Attic', 'A dark attic.')
player = Player('fritz', 'm')
io = ConsoleIo(None)
io.supports_smartquotes = False
pc = PlayerConnection(player, io)
player.set_screen_sizes(0, 100)
julie = Living('julie', 'f')
julie.move(attic)
player.move(attic)
julie.tell('message for julie')
attic.tell('message for room')
self.assertEqual(['message for room\n'], player.test_get_output_paragraphs())
with self.assertRaises(ActionRefused):
    player.create_wiretap(julie)
player.privileges = {'wizard'}
player.create_wiretap(julie)
player.create_wiretap(attic)
julie.tell('message for julie')
attic.tell('message for room')
pubsub.sync()
output = pc.get_output()
self.assertTrue((""[wiretapped from `Attic': message for room]"" in output))
self.assertTrue((""[wiretapped from `julie': message for julie]"" in output))
self.assertTrue((""[wiretapped from `julie': message for room]"" in output))
self.assertTrue(('message for room ' in output))
player.clear_wiretaps()
import gc
gc.collect()
julie.tell('message for julie')
attic.tell('message for room')
","
attic = Location('Attic', 'A dark attic.')
player = Player('fritz', 'm')
io = ConsoleIo(None)
io.supports_smartquotes = False
pc = PlayerConnection(player, io)
player.set_screen_sizes(0, 100)
julie = Living('julie', 'f')
julie.move(attic)
player.move(attic)
julie.tell('message for julie')
attic.tell('message for room')
self.assertEqual(['message for room\n'], player.test_get_output_paragraphs())
with self.assertRaises(ActionRefused):
    player.create_wiretap(julie)
player.privileges = {'wizard'}
player.create_wiretap(julie)
player.create_wiretap(attic)
julie.tell('message for julie')
attic.tell('message for room')
pubsub.sync()
output = pc.get_output()
julie.tell('message for julie')
attic.tell('message for room')
","
attic = Location('Attic', 'A dark attic.')
player = Player('fritz', 'm')
io = ConsoleIo(None)
io.supports_smartquotes = False
pc = PlayerConnection(player, io)
player.set_screen_sizes(0, 100)
julie = Living('julie', 'f')
player.privileges = {'wizard'}
player.create_wiretap(julie)
player.create_wiretap(attic)
julie.tell('message for julie')
attic.tell('message for room')
pubsub.sync()
output = pc.get_output()
julie.tell('message for julie')
attic.tell('message for room')
","
attic = Location('Attic', 'A dark attic.')
player = Player('fritz', 'm')
io = ConsoleIo(None)
io.supports_smartquotes = False
pc = PlayerConnection(player, io)
player.set_screen_sizes(0, 100)
julie = Living('julie', 'f')
player.privileges = {'wizard'}
pubsub.sync()
output = pc.get_output()
julie.tell('message for julie')
attic.tell('message for room')
","
attic = Location('Attic', 'A dark attic.')
player = Player('fritz', 'm')
io = ConsoleIo(None)
io.supports_smartquotes = False
pc = PlayerConnection(player, io)
player.set_screen_sizes(0, 100)
julie = Living('julie', 'f')
player.privileges = {'wizard'}
pubsub.sync()
output = pc.get_output()
","
attic = Location('Attic', 'A dark attic.')
player = Player('fritz', 'm')
io = ConsoleIo(None)
io.supports_smartquotes = False
pc = PlayerConnection(player, io)
player.set_screen_sizes(0, 100)
pubsub.sync()
output = pc.get_output()
"
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_pubsub.py::TestPubsub::test_destroy,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,c4e2d845307b77f2d84b16c20df90d5b,True,"
sync()
s1 = topic('testA')
s2 = topic('testB')
s1.send('123')
p = pending()
self.assertIn('testA', p)
self.assertIn('testB', p)
s1.destroy()
"
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_pubsub.py::TestPubsub::test_pubsub_async,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,8d990ddcadcd6f6db8771a50cdbad841,True,"
sync()
s = topic('test1async')
subber = Subber('sub1')
subber2 = Subber('sub2')
s.subscribe(subber)
s.subscribe(subber2)
s2 = topic('test1async')
result = s2.send('event1')
self.assertIsNone(result)
self.assertEqual([], subber.messages)
self.assertEqual([], subber2.messages)
(events, idle, subbers) = pending()['test1async']
self.assertEqual(1, events)
result = sync()
","
sync()
s = topic('test1async')
subber = Subber('sub1')
subber2 = Subber('sub2')
s.subscribe(subber)
s.subscribe(subber2)
s2 = topic('test1async')
","
sync()
s = topic('test1async')
subber = Subber('sub1')
s2 = topic('test1async')
","
sync()
s = topic('test1async')
","
sync()
"
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_pubsub.py::TestPubsub::test_pubsub_sync,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,3e602739c8117f854b80c037a7c5ea8c,True,"
sync()
s = topic('testsync')
subber = Subber('sub1')
subber2 = Subber('sub2')
s.subscribe(subber)
s.subscribe(subber)
s.subscribe(subber2)
s.subscribe(subber2)
result = s.send([1, 2, 3], True)
self.assertEqual([('testsync', [1, 2, 3])], subber.messages)
self.assertEqual([('testsync', [1, 2, 3])], subber2.messages)
self.assertEqual(2, len(result))
self.assertTrue(('sub1' in result))
self.assertTrue(('sub2' in result))
s.unsubscribe(subber)
s.unsubscribe(subber)
s.unsubscribe(subber2)
result = s.send('after unsubscribing', True)
","
sync()
s = topic('testsync')
subber = Subber('sub1')
subber2 = Subber('sub2')
s.subscribe(subber)
s.subscribe(subber)
s.subscribe(subber2)
s.subscribe(subber2)
result = s.send([1, 2, 3], True)
","
sync()
s = topic('testsync')
subber = Subber('sub1')
subber2 = Subber('sub2')
result = s.send([1, 2, 3], True)
","
sync()
s = topic('testsync')
result = s.send([1, 2, 3], True)
","
sync()
s = topic('testsync')
","
sync()
"
kanren,bacc7eb5895c348e348c1b5291ddf188f88c5c88,tests/test_assoccomm.py::test_assoccomm_objects,tests/test_assoccomm.py::test_eq_assoc_args,tests/test_assoccomm.py::test_eq_assoccomm,dd1e27accc1b635318cf639c1ef00220,False
kanren,bacc7eb5895c348e348c1b5291ddf188f88c5c88,tests/test_assoccomm.py::test_assoccomm_objects,tests/test_assoccomm.py::test_assoc_flatten,tests/test_assoccomm.py::test_eq_assoccomm,a89c360cf70875425fdedb53b006f3ad,False
kanren,bacc7eb5895c348e348c1b5291ddf188f88c5c88,tests/test_assoccomm.py::test_assoccomm_objects,tests/test_assoccomm.py::test_assoccomm_algebra,tests/test_assoccomm.py::test_eq_assoccomm,b41637a6136f03d624b4637a75d0384b,False
Hockey-Scraper,a829e0a0fe4bf548109863031ea9987abc0219a0,tests/test_json_schedule.py::test_get_schedule,tests/test_json_schedule.py::test_scrape_schedule,tests/test_json_schedule.py::test_get_dates,26ba6dec989d63db40018222207d529e,False
Hockey-Scraper,a829e0a0fe4bf548109863031ea9987abc0219a0,tests/test_json_schedule.py::test_get_schedule,tests/test_json_schedule.py::test_chunk_schedule_calls,tests/test_json_schedule.py::test_get_dates,1a555430774b6e9633d50ca3df43b77b,False
