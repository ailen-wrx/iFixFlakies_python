project,sha,polluter_fullpath,cleaner_fullpath,victim_fullpath,md5,pv_result,pcv_result,can_copy_work,1st_patch_time,minimal_patch_time
Flask-JWT-Router,0fb1e256c81409be6f08d8be12f07e5f58b4f914,tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client0-None-200],tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client1-None-401],tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client3-None-401],a6c68fd8549266ef46fb747c7966d42f,passed,passed,,,
Flask-JWT-Router,0fb1e256c81409be6f08d8be12f07e5f58b4f914,tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client0-None-200],tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client2-None-401],tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client3-None-401],594fad5540da6332560ff4b28c165d05,passed,passed,,,
IOCynergy,1821423680f741d8ca06bcc6a02c8b21156f9ba0,cynergy/tests/test_register_multiple.py::test_register_multiple_when_onc_instance_is_already_registered,cynergy/tests/test_class_mapping.py::test_class_mapping_from_init,cynergy/tests/test_register_multiple.py::test_register_multiple,10d7864795d1789f4dc4d460342a95da,failed,passed,True,0.5157323554158211,0.8178444281220436,"
container.initialize(class_mapping={Example: Example2})
instance = container.get(Example)
","
container.initialize(class_mapping={Example: Example2})
"
IOCynergy,1821423680f741d8ca06bcc6a02c8b21156f9ba0,cynergy/tests/test_register_multiple.py::test_multiple_list_arguments_with_wrap,cynergy/tests/test_class_mapping.py::test_class_mapping,cynergy/tests/test_register_multiple.py::test_register_multiple,55b9477fcb34ff731d9044115c5e7b1f,failed,passed,True,0.3039510175585747,0.6618568673729897,"
container.initialize()
container.register_class(Example, Example2)
","
container.initialize()
"
IOCynergy,1821423680f741d8ca06bcc6a02c8b21156f9ba0,cynergy/tests/test_register_multiple.py::test_multiple_list_arguments_with_wrap,cynergy/tests/test_class_mapping.py::test_class_mapping_from_init,cynergy/tests/test_register_multiple.py::test_register_multiple,e4dd39ffa2664138f7454dcc732f62b2,failed,passed,True,0.5184193775057793,0.8212407231330872,"
container.initialize(class_mapping={Example: Example2})
instance = container.get(Example)
","
container.initialize(class_mapping={Example: Example2})
"
IOCynergy,1821423680f741d8ca06bcc6a02c8b21156f9ba0,cynergy/tests/test_register_multiple.py::test_multiple_list_arguments,cynergy/tests/test_class_mapping.py::test_class_mapping,cynergy/tests/test_register_multiple.py::test_register_multiple,5d5dd7765df7cc111eaff0fbc3033476,failed,passed,True,0.3047221824526787,0.6633760705590248,"
container.initialize()
container.register_class(Example, Example2)
","
container.initialize()
"
IOCynergy,1821423680f741d8ca06bcc6a02c8b21156f9ba0,cynergy/tests/test_register_multiple.py::test_multiple_list_arguments,cynergy/tests/test_class_mapping.py::test_class_mapping_from_init,cynergy/tests/test_register_multiple.py::test_register_multiple,7bfc8fde19430c49f93931a1e4811701,failed,passed,True,0.517654076218605,0.8216011896729469,"
container.initialize(class_mapping={Example: Example2})
instance = container.get(Example)
","
container.initialize(class_mapping={Example: Example2})
"
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_single_input,test/test_occam_data.py::test_occam_data_progress_bars,test/test_occam_data.py::test_occam_data_not_save_to_npy,57ef882903046d54c7e47be871446d20,failed,passed,True,2.2038687840104103,7.108681254088879,"
(fort1, fort7, fort8) = _load_default_forts()
occam_data_silent = OccamData(fort1, fort7, fort8)
occam_data_verbose = OccamData(fort1, fort7, fort8)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose.__dict__[key])
occam_data_verbose.save()
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=False, silent=True)
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=True, silent=False)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose_npy.__dict__[key])
shutil.rmtree(class_dir)
","
(fort1, fort7, fort8) = _load_default_forts()
occam_data_silent = OccamData(fort1, fort7, fort8)
occam_data_verbose = OccamData(fort1, fort7, fort8)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose.__dict__[key])
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=False, silent=True)
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=True, silent=False)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose_npy.__dict__[key])
shutil.rmtree(class_dir)
","
(fort1, fort7, fort8) = _load_default_forts()
occam_data_silent = OccamData(fort1, fort7, fort8)
occam_data_verbose = OccamData(fort1, fort7, fort8)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose.__dict__[key])
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=True, silent=False)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose_npy.__dict__[key])
shutil.rmtree(class_dir)
"
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_single_input,test/test_occam_data.py::test_occam_data_save_load,test/test_occam_data.py::test_occam_data_not_save_to_npy,332c1349f05e14f762eb93f1c2e90cb3,failed,passed,True,2.6173380613327026,16.799307510256767,"
shutil.rmtree(class_dir, ignore_errors=True)
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
"
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_attributes,test/test_occam_data.py::test_occam_data_progress_bars,test/test_occam_data.py::test_occam_data_not_save_to_npy,73bbf38650a0c3900bb65e810c5ae9f3,failed,passed,True,1.9545796290040016,6.241393089294434,"
(fort1, fort7, fort8) = _load_default_forts()
occam_data_silent = OccamData(fort1, fort7, fort8)
occam_data_verbose = OccamData(fort1, fort7, fort8)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose.__dict__[key])
occam_data_verbose.save()
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=False, silent=True)
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=True, silent=False)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose_npy.__dict__[key])
shutil.rmtree(class_dir)
","
(fort1, fort7, fort8) = _load_default_forts()
occam_data_silent = OccamData(fort1, fort7, fort8)
occam_data_verbose = OccamData(fort1, fort7, fort8)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose.__dict__[key])
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=False, silent=True)
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=True, silent=False)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose_npy.__dict__[key])
shutil.rmtree(class_dir)
","
(fort1, fort7, fort8) = _load_default_forts()
occam_data_silent = OccamData(fort1, fort7, fort8)
occam_data_verbose = OccamData(fort1, fort7, fort8)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose.__dict__[key])
occam_data_verbose_npy = OccamData(file_name_fort_1, load_from_npy=True, silent=False)
for key in occam_data_silent.__dict__:
    assert _check_equal(occam_data_silent.__dict__[key], occam_data_verbose_npy.__dict__[key])
shutil.rmtree(class_dir)
"
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_attributes,test/test_occam_data.py::test_occam_data_save_load,test/test_occam_data.py::test_occam_data_not_save_to_npy,bba80a935f591cd688e00cee7dde07b4,failed,passed,True,2.3067865893244743,14.79282308369875,"
shutil.rmtree(class_dir, ignore_errors=True)
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
"
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_not_equal,test/test_occam_data.py::test_occam_data_save_load,test/test_occam_data.py::test_occam_data_not_save_to_npy,98721a8d92dd35b98e63a4dd5b482e51,failed,passed,True,2.350550100207329,15.053332448005676,"
shutil.rmtree(class_dir, ignore_errors=True)
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
"
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_constructor_files,test/test_occam_data.py::test_occam_data_progress_bars,test/test_occam_data.py::test_occam_data_not_save_to_npy,1159fec43fafb990ea9a871178e335bb,failed,failed,,,
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_constructor_files,test/test_occam_data.py::test_occam_data_save_load,test/test_occam_data.py::test_occam_data_not_save_to_npy,8cc40865ab92726f9216657e966b03ab,failed,passed,True,2.6088470444083214,16.715034924447536,"
shutil.rmtree(class_dir, ignore_errors=True)
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
assert (not occam_data_npy_loaded.save(overwrite=False))
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
_assert_all_attributes_present_and_equal(occam_data_npy_loaded_file, fort1, fort7, xyz)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    attributes.append(key)
for array in attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
for key in all_attributes:
    assert (key in occam_data_npy_loaded.__dict__)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
occam_data_npy_loaded_file = OccamData(os.path.join(class_dir, os.pardir, 'fort.1'), silent=True)
caught = False
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
","
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    assert (key in occam_data.__dict__)
occam_data_npy_loaded = OccamData(os.path.join(class_dir, os.pardir), silent=True)
try:
    _ = OccamData('this_is_not_a_file', silent=True)
except FileNotFoundError:
    caught = True
assert caught
shutil.rmtree(class_dir)
"
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_wrong_input,test/test_occam_data.py::test_occam_data_progress_bars,test/test_occam_data.py::test_occam_data_not_save_to_npy,79ced83bf5dcea51fa8a5ca29e1b3e41,passed,passed,,,
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_wrong_input,test/test_occam_data.py::test_occam_data_save_load,test/test_occam_data.py::test_occam_data_not_save_to_npy,ce7022449f6253028159131b2bad4161,passed,passed,,,
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_not_equal,test/test_occam_data.py::test_occam_data_save_load,test/test_occam_data.py::test_occam_data_progress_bars,4a7342f2377acbe1e5f1eeec5f9ee539,failed,passed,True,0.5018924698233604,6.225844793021679,"
shutil.rmtree(class_dir, ignore_errors=True)
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    expected_file_name = (array + '.npy')
    assert os.path.exists(os.path.join(class_dir, expected_file_name))
for key in all_attributes:
    assert (key in occam_data.__dict__)
","
shutil.rmtree(class_dir, ignore_errors=True)
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
attributes = []
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
","
shutil.rmtree(class_dir, ignore_errors=True)
(occam_data, fort1, fort7, xyz) = _create_default_occam_data_object()
all_attributes = [key for key in occam_data.__dict__]
for key in all_attributes:
    if isinstance(occam_data.__dict__[key], np.ndarray):
        attributes.append(key)
occam_data.save()
for array in attributes:
    assert (key in occam_data.__dict__)
"
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_single_input,test/test_occam_data.py::test_occam_data_not_equal,test/test_occam_data.py::test_occam_data_progress_bars,37873c0731978f3198554bd7b721280f,failed,failed,,,
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_single_input,test/test_fort5_to_xyz.py::test_convert_file_name,test/test_occam_data.py::test_occam_data_progress_bars,90774ae8105aa77e489b503b2cf73d7e,failed,failed,,,
OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_single_input,test/test_fort5_to_xyz.py::test_fort5_to_xyz_box,test/test_occam_data.py::test_occam_data_progress_bars,d0fc38b4e0899a9245d05646bd846038,failed,failed,,,
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_mudobjects.py::TestDoorsExits::test_go_through_exit,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,b5fe668ed61762368f297b7c81e7f82d,passed,passed,,,
Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_mudobjects.py::TestDoorsExits::test_linked_door_pair,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,c2fded41d2c6bd1ba5d9233399c1adfc,passed,passed,,,
aries-staticagent-python,62f0e4e435e4e324f76a8fb724d0f733192bc0c3,tests/test_pack_unpack.py::test_pack_unpack_with_routing_keys,aries_staticagent/static_connection.py::aries_staticagent.static_connection.StaticConnection,tests/test_pack_unpack.py::test_pack_unpack_anon,24d82c209512b4b99bc40f65780e9239,PCV_ERROR
aries-staticagent-python,62f0e4e435e4e324f76a8fb724d0f733192bc0c3,tests/test_pack_unpack.py::test_pack_unpack_with_routing_keys,tests/test_crypto.py::test_b64_to_bytes_urlsafe_padding,tests/test_pack_unpack.py::test_pack_unpack_anon,0d18b9268c7c1daf7a2b95e0c79bfd98,PCV_ERROR
aries-staticagent-python,62f0e4e435e4e324f76a8fb724d0f733192bc0c3,tests/test_pack_unpack.py::test_pack_unpack_with_routing_keys,aries_staticagent/static_connection.py::aries_staticagent.static_connection.StaticConnection,tests/test_pack_unpack.py::test_pack_unpack_auth,082338f7218e7fa5d05f9445960a71c5,PCV_ERROR
aries-staticagent-python,62f0e4e435e4e324f76a8fb724d0f733192bc0c3,tests/test_pack_unpack.py::test_pack_unpack_with_routing_keys,tests/test_crypto.py::test_b64_to_bytes_urlsafe_padding,tests/test_pack_unpack.py::test_pack_unpack_auth,10f9dc049b5a235e9e5ea59b64bad6b9,PCV_ERROR
atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_basic_get,tests/test_base.py::TestBase::test_model,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,cbdb52ab7bd4023aed1ccd8acd9dc77f,failed,passed,False,,
atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_basic_get,tests/test_client.py::TestClient::test_atlas_client,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,d63e0101d3807a017ffdbdf73e10fd06,failed,passed,True,0.508330874145031,1.6902608424425125,"
client = Atlas('localhost', port=21000, username='admin', password='admin')
assert (client.base_url == 'http://localhost:21000')
assert ('entity_post' in dir(client))
","
client = Atlas('localhost', port=21000, username='admin', password='admin')
assert ('entity_post' in dir(client))
","
client = Atlas('localhost', port=21000, username='admin', password='admin')
"
atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_fulltext_get,tests/test_base.py::TestBase::test_model,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,70c0cd8d9564c72d9afb0b42103a168d,failed,passed,False,,
atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_fulltext_get,tests/test_client.py::TestClient::test_atlas_client,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,90375beea14f8d3f5ee293b948b00acb,failed,passed,True,0.5060984119772911,1.6793089807033539,"
client = Atlas('localhost', port=21000, username='admin', password='admin')
assert (client.base_url == 'http://localhost:21000')
assert ('entity_post' in dir(client))
","
client = Atlas('localhost', port=21000, username='admin', password='admin')
assert ('entity_post' in dir(client))
","
client = Atlas('localhost', port=21000, username='admin', password='admin')
"
atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_dsl_get,tests/test_base.py::TestBase::test_model,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,b8f094063462a253935db2ef1e93e129,failed,passed,False,,
atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_dsl_get,tests/test_client.py::TestClient::test_atlas_client,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,5856213307519b1ea58665fece91575d,failed,passed,True,0.505274586379528,1.677336409687996,"
client = Atlas('localhost', port=21000, username='admin', password='admin')
assert (client.base_url == 'http://localhost:21000')
assert ('entity_post' in dir(client))
","
client = Atlas('localhost', port=21000, username='admin', password='admin')
assert ('entity_post' in dir(client))
","
client = Atlas('localhost', port=21000, username='admin', password='admin')
"
atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_basic_post,tests/test_base.py::TestBase::test_model,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,99cc376b3d8e206fbf1329e2c35f34cc,failed,passed,False,,
atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_basic_post,tests/test_client.py::TestClient::test_atlas_client,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,9be7f89f1057ada3a3f5636d9a7ca6ed,failed,passed,True,0.5095213130116463,1.692754939198494,"
client = Atlas('localhost', port=21000, username='admin', password='admin')
assert (client.base_url == 'http://localhost:21000')
assert ('entity_post' in dir(client))
","
client = Atlas('localhost', port=21000, username='admin', password='admin')
assert ('entity_post' in dir(client))
","
client = Atlas('localhost', port=21000, username='admin', password='admin')
"
aud,2dfc81dad3da78537e1b1c6f5cc5630ba5b837f9,aud/test_aud.py::test_afx_2,aud/test_aud.py::test_afx_3,aud/test_aud.py::test_export,69cd0fdcd81d5bef3b6cd1538223684b,failed,failed,,,
aud,2dfc81dad3da78537e1b1c6f5cc5630ba5b837f9,aud/test_aud.py::test_cleanup,aud/test_aud.py::test_init,aud/test_aud.py::test_afx_2,9fea13a47ad8e3c7ef010b59a92f6756,failed,passed,False,,
aud,2dfc81dad3da78537e1b1c6f5cc5630ba5b837f9,aud/test_aud.py::test_cleanup,aud/test_aud.py::test_init,aud/test_aud.py::test_afx_3,e35ee6397c6559c9f58a50828f5c6148,failed,passed,False,,
aud,2dfc81dad3da78537e1b1c6f5cc5630ba5b837f9,aud/test_aud.py::test_afx_2,aud/test_aud.py::test_afx_3,aud/test_aud.py::test_export,69cd0fdcd81d5bef3b6cd1538223684b,failed,failed,,,
aud,2dfc81dad3da78537e1b1c6f5cc5630ba5b837f9,aud/test_aud.py::test_init,aud/test_aud.py::test_afx_3,aud/test_aud.py::test_export,cf72d9a10074810c13fc5379e1ae09be,failed,passed,False,,
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_param_required_error,tests/test_api_client.py::TestApiClient::test_internal_server_error,tests/test_api_client.py::TestApiClient::test_authentication_error,cb8618933575b8a5f6eb7e9eec8c8cce,failed,passed,True,0.432099424302578,1.1001848727464676,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_param_required_error,tests/test_api_client.py::TestApiClient::test_rate_limit_exceeded_error,tests/test_api_client.py::TestApiClient::test_authentication_error,5fecd8558b3596867b7425ce96104b6d,failed,passed,True,0.43293288350105286,1.1025650575757027,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_validation_error,tests/test_api_client.py::TestApiClient::test_internal_server_error,tests/test_api_client.py::TestApiClient::test_authentication_error,e0f88e16e04db7059a6fa3a2ad49041b,failed,passed,True,0.4314538463950157,1.100161835551262,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_validation_error,tests/test_api_client.py::TestApiClient::test_rate_limit_exceeded_error,tests/test_api_client.py::TestApiClient::test_authentication_error,96263ca9402b539f8bb0641d91ae4a3b,failed,passed,True,0.4323430433869362,1.1019312888383865,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_param_required_error,tests/test_api_client.py::TestApiClient::test_internal_server_error,tests/test_api_client.py::TestApiClient::test_invalid_request_error,c81e58f550472bdd431774c342cca8a7,failed,passed,True,0.43391602486371994,1.1066672801971436,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_param_required_error,tests/test_api_client.py::TestApiClient::test_rate_limit_exceeded_error,tests/test_api_client.py::TestApiClient::test_invalid_request_error,0c1ca92ad5ba92383456a177ee551422,failed,passed,True,0.4322095662355423,1.1007111594080925,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_validation_error,tests/test_api_client.py::TestApiClient::test_internal_server_error,tests/test_api_client.py::TestApiClient::test_invalid_request_error,89529c68090946b60e8905afdd27d6f1,failed,passed,True,0.43309157341718674,1.1030729785561562,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_validation_error,tests/test_api_client.py::TestApiClient::test_rate_limit_exceeded_error,tests/test_api_client.py::TestApiClient::test_invalid_request_error,68b05bbd14cbe7d69ab7d8b7195f5e05,failed,passed,True,0.43916943669319153,1.1241922676563263,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_param_required_error,tests/test_api_client.py::TestApiClient::test_internal_server_error,tests/test_api_client.py::TestApiClient::test_resource_not_found_error,014abb47a9413c0f979d380c4e207b40,failed,passed,True,0.4376968741416931,1.1134287044405937,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_param_required_error,tests/test_api_client.py::TestApiClient::test_rate_limit_exceeded_error,tests/test_api_client.py::TestApiClient::test_resource_not_found_error,8daf49a9b4260d85695d6667d31880f7,failed,passed,True,0.4424757584929466,1.1204051151871681,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_validation_error,tests/test_api_client.py::TestApiClient::test_internal_server_error,tests/test_api_client.py::TestApiClient::test_resource_not_found_error,46c20725444df274ebea656e759faa6c,failed,passed,True,0.4313114285469055,1.1006670147180557,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=500)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_validation_error,tests/test_api_client.py::TestApiClient::test_rate_limit_exceeded_error,tests/test_api_client.py::TestApiClient::test_resource_not_found_error,991e5f9e387e6fe5ac7adb4c720f8924,failed,passed,True,0.43373575061559677,1.1053032651543617,"
mock.MagicMock.ok = PropertyMock(return_value=False)
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
mock.MagicMock.status_code = PropertyMock(return_value=429)
","
mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
"
colltools,e50f98ccda33ab409fcdba277a39f071824e24c7,tests/test_name_registry.py::test_gets_instance,tests/test_name_registry.py::test_validates_name,tests/test_name_registry.py::test_name_registry_has_no_instances,c4d7b23bcd13e043d40385fb74e561e9,failed,failed,,,
colltools,e50f98ccda33ab409fcdba277a39f071824e24c7,tests/test_name_registry.py::test_singleton_instances,tests/test_name_registry.py::test_validates_name,tests/test_name_registry.py::test_name_registry_has_no_instances,9dc1b213850ba5f51cf43c147093ef6f,failed,failed,,,
colltools,e50f98ccda33ab409fcdba277a39f071824e24c7,tests/test_name_registry.py::test_repr,tests/test_name_registry.py::test_validates_name,tests/test_name_registry.py::test_name_registry_has_no_instances,2187abcf182cdf7b104f02d2d82b27e8,failed,failed,,,
colltools,e50f98ccda33ab409fcdba277a39f071824e24c7,tests/test_name_registry.py::test_name_attribute,tests/test_name_registry.py::test_validates_name,tests/test_name_registry.py::test_name_registry_has_no_instances,99883795efa435897598a2520cfdba1c,failed,failed,,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_cache,24300a845a03c6b651ae481dca18e34c,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_cache,bbf9e10c0de23b8f7d362b99a5f33de7,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_cache,7fbd7413a7e77204091f7954809188a9,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_cache,d9bb956b190ffe2ae231e2815253296c,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_cache,cc616b0096a555db69d2a15225d31db6,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_cache,821ad5d9a040585a14f831acf2b114f1,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_config,39c6e162c274f23ed0651c6945644316,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_config,86be0fc2f74a3f40db685ecc2fa356f0,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_config,a5ca22d7b11623dd94fce7d3de2892e3,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_config,d3c4cdc65b07ebbf2129df3ebf61e280,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_config,6423d8ca66814128777dc2410463d9d0,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_config,b4b1fda1b526797f11bd4fa666bfd484,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_data,b4acef6370b1cc9e1fce01738e02c982,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_data,8f7a67b5899cc4d2aad134e2bb6ede2a,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_data,d729717eb226d0b517003831a9c6be39,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_data,b95173b5f44b570540102ff09c16512e,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_data,45da0c917171f600c9ad61ce892ad9e9,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestLinuxNoXDG::test_noxdg_data,f6d9d45236542596d29d08b0b2c2a3b5,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_cache,d53872c454b0710995658359997bb699,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_cache,d4e7b5b9c15be67bab7e17499170fe8f,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_cache,11532fdba07b674ea483b0343ee992e3,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_cache,cb5093227fd59b9aecbfb9930f35841c,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_cache,6e3dc2aa5a2b4acddd7764322711f5b4,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_cache,682aa72f5cbabfe178ceb9c3b53c30ad,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_config,ab20fc5d213c8a2a7d0d4e3bc76897c0,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_config,e6c2d14cf901c4c7dcb46cd81a6fd6d7,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_config,44b09c125cb2c554ad958ef713d718df,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_config,bb659d8e09877e1c2024702dd77f0a55,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_config,054b94719a99f0d5299f06093298e3fc,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_config,a39c9876b24c748261e427ab842e23b6,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_data,5df65d5df3d3c8a12bc5405b2ec7d154,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_data,2741500e0496d75362a38ec8e7e85400,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_data,f68d94dd898ce5ae4bdc700838c2c1c2,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_data,ccc9baba2860662fcaa349bfb8b4dc2f,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_data,83ae7ad4ab8a36bd3af71ec613f1def6,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacForceUnix::test_noxdg_data,5809285f1ba500111801b3941016bb8e,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_cache,ca600e012f89d30cb1c6475d9318a321,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_cache,62d1fdbe55da100ea6143f88c4fc092b,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_cache,ddcfa6c1920814fa417aebba42e5027e,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_cache,b389c25ef57c6b90b9b21cd306db1048,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_cache,efbae3b51e7294a41755ce0532ff6227,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_cache,051d64890ccc054e3a1566932c425400,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_config,2aec20c678bf2b62da772f40c96d6cb0,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_config,4709c7f7f69f699c9de0fb93785bed61,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_config,0f31f075922fd29e9d5d1feba9de86d6,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_config,0804c204f1f1148577add92070927c8d,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_config,66a683a8406b2c040bb5a06f76cdba5a,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_config,3131170787c4110238f6eae832c77567,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_data,b53f2b078e2171f170891408c3b8d1e3,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_data,437106c46a4db43a6266f3d0e78c2377,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_data,3036af39d12f1de99cc6b2e760b9d3a4,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_data,9a830ae2e2886f31d4894228ca5a9c6d,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_data,5db75551fe3b8331a47b9bd0575af97a,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestMacNoXDG::test_noxdg_data,a430d9e565c5f357be07371fd74ebbcf,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_cache,23bb7598746a103b198fb074f66e210f,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_cache,aaac03ef4f2c8237eb6899a2f70894b3,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_cache,ba48f41ae6ac346064232b3f5976b2d8,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_cache,9e4c49186d4aae0d715648b79300748f,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_cache,557d023ca3bde74032aecd72579199d3,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_cache,d8c89f288dcdbb0e19f65828e23ea931,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_config,e2b9c87926f2e03c4ad1b56bb015c223,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_config,e1ad50d1be3e722605461400113417f7,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_config,2a31487fae2c9f52ba78ddbceb62ff9d,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_config,94e67c4084b91a3f4c38f0985b0e778f,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_config,761be91af66c06d2f38865e1bebe7e6b,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_config,b189cb656f5d142b6436ddf765c7a786,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_data,21b9a15e5b6532e8206e8579d6b7279b,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_data,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_data,7007ed1681ddea9f9f71044c769a2549,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_data,d76c92b318d656634e7048b6229dfa0c,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_config,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_data,b56d9fc72d9ee3ebc953525f49db0e93,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_cache_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_data,c73350f97d84e7ef16dfce5a15b27974,failed,passed,False,,
config-better,c14638da3fe95a669a04db2602e1f6ea15591c36,tests/test___init__.py::TestXDG::test_xdg_cache,tests/test___init__.py::TestMakedirs::test_config_dir,tests/test___init__.py::TestWindowsNoXDG::test_noxdg_data,1d85cf7229a55f7f6ffc6afd4ec61471,failed,passed,False,,
confight,be2d162c99cc3c709289913de137f8d8bfbd35d5,test_confight.py::TestLoad::test_it_should_load_paths_for_given_format,test_confight.py::TestFind::test_it_should_load_files_in_order,test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths,38edfdf5d18565a883e3be9211594a3d,passed,passed,,,
confight,be2d162c99cc3c709289913de137f8d8bfbd35d5,test_confight.py::TestLoad::test_it_should_load_paths_for_given_format,test_confight.py::TestFind::test_it_should_load_full_paths,test_confight.py::TestLoad::test_it_should_load_and_merge_lists_of_paths,c477910364fc985753ddcde3c36e4599,passed,passed,,,
coo,da9e75d46ed65599cd2223b029ac30c08496a80b,tests/test_coo.py::test_tweet_media_update,tests/test_coo.py::test_tweet_media_TwitterError,tests/test_coo.py::test_tweet_none_media_TwitterError,6904b7ca907691a40496b0b50f429ff9,failed,passed,True,,
coo,da9e75d46ed65599cd2223b029ac30c08496a80b,tests/test_coo.py::test_tweet[updates2-now-None-$message-local],tests/test_coo.py::test_tweet_media_TwitterError,tests/test_coo.py::test_tweet_none_media_TwitterError,9d79ac51a3ddb5a1a9f2d11e8ec5577c,failed,passed,True,,
coo,da9e75d46ed65599cd2223b029ac30c08496a80b,tests/test_coo.py::test_tweet[updates3-now-now-None-local],tests/test_coo.py::test_tweet_media_TwitterError,tests/test_coo.py::test_tweet_none_media_TwitterError,1eec22f3084e4f1605fc4d17bc7a3da7,failed,passed,True,,
coo,da9e75d46ed65599cd2223b029ac30c08496a80b,tests/test_coo.py::test_tweet_media_FileNotFoundError,tests/test_coo.py::test_tweet_media_TwitterError,tests/test_coo.py::test_tweet_none_media_TwitterError,716c34848404b123bbef47449e2f93a0,failed,passed,True,,
coo,da9e75d46ed65599cd2223b029ac30c08496a80b,tests/test_coo.py::test_schedule_time_zone_media,tests/test_coo.py::test_tweet_media_TwitterError,tests/test_coo.py::test_tweet_none_media_TwitterError,52ad687947ab34dc3d6244026c36fd6b,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestAutoIdentifiers::test_no_ident,90b3d4d6726efd6400610f688ef2af8c,failed,passed,True,0.6681815609335899,1.3886746913194656,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestAutoIdentifiers::test_no_ident,d670adb7630f23b47921360bf0ae90df,failed,passed,True,0.67447230219841,1.9205466732382774,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,c6d47e7d22578ecc2f5f4ac3c05e149e,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_collapse_json,b8d48917a8c8b7a1b227f352af16faa2,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_uuid,tests/test_model.py::TestFactorySerialization::test_collapse_json,e4f1d3878c5f9dfea3287369a995cf28,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_uuid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestAutoIdentifiers::test_no_ident,342a4f200aa6b8a259278a67f8550e51,failed,passed,True,0.6628548130393028,1.2193219885230064,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,c6d47e7d22578ecc2f5f4ac3c05e149e,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_collapse_json,b8d48917a8c8b7a1b227f352af16faa2,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestBaseResource::test_allows_multiple,5c287254b4b1b795103b688dbd1c37bc,failed,passed,True,0.6732838228344917,1.3981758803129196,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestBaseResource::test_allows_multiple,2b69777f2b59b075c255217218925ac9,failed,passed,True,0.6759401634335518,1.8691494315862656,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_broken_unicode,tests/test_model.py::TestFactorySetup::test_base_dir,tests/test_model.py::TestBaseResource::test_check_reference,42886c33d41b943056171537d45e8f42,failed,passed,False,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_broken_unicode,tests/test_model.py::TestFactorySetup::test_base_url,tests/test_model.py::TestBaseResource::test_check_reference,2ca8df8743de968a3bf886c613dd1423,failed,passed,False,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestBaseResource::test_init_params,83c9f70ee3f4b5506fc9580f225a2f61,failed,passed,True,0.6715826019644737,1.3963315337896347,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestBaseResource::test_init_params,30e05a80e1a1be586d778863e2af9451,failed,passed,True,0.6826271414756775,1.877318874001503,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestBaseResource::test_list_my_props,0129331223b353e2707c1fddcfc02747,failed,passed,True,0.6714672148227692,1.394046626985073,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestBaseResource::test_list_my_props,0e09d5b70d26cf4c05518561c13037f7,failed,passed,True,0.6774627193808556,1.8753706812858582,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestBaseResource::test_multiplicity,99d39d5ac03c941134e975368484a096,failed,passed,True,0.6725256517529488,1.395824745297432,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestBaseResource::test_multiplicity,36652358b387bb0fc2d1f541e9ed8415,failed,passed,True,0.6719575300812721,1.8610358014702797,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_breadth,a1412f2971d89765ed34c8c011e79c27,failed,passed,True,0.6784816980361938,1.422046646475792,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestFactorySerialization::test_breadth,13d90c033fa272ac3343f7cd315705a0,failed,passed,True,0.6711645871400833,1.859454296529293,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,c6d47e7d22578ecc2f5f4ac3c05e149e,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_collapse_json,b8d48917a8c8b7a1b227f352af16faa2,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,c6d47e7d22578ecc2f5f4ac3c05e149e,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_collapse_json,b8d48917a8c8b7a1b227f352af16faa2,passed,passed,,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_ordering,e4b5c4a563b98f45da5c1d44234e725a,failed,passed,True,0.67877197265625,1.4066438972949982,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestFactorySerialization::test_ordering,8205275c26588557d7184d4fa83057e6,failed,passed,True,0.6773622930049896,1.875295877456665,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_pipe_scoped,269dd9b4dbde44f6ddf1fab85b144ecb,failed,passed,True,0.6794936135411263,1.4086726233363152,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestFactorySerialization::test_pipe_scoped,26aa3af08bdfd2e6d2b2ae977add79b9,failed,passed,True,0.6821328476071358,1.8908640071749687,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_production_mode,63db02161885d2ce27da1c65023ebf24,failed,passed,True,0.679172046482563,1.4071624353528023,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestFactorySerialization::test_production_mode,0685c4464b800f3c181e6e1e1c5bac5c,failed,passed,True,0.6795564740896225,1.878659412264824,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_recursion,6af4973e7acc8748a01b12d5e2e6121c,failed,passed,True,0.6790674179792404,1.4063515290617943,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestFactorySerialization::test_recursion,e4c06c03b51faefcaced154c55e6d3d6,failed,passed,True,0.6776394322514534,1.873431220650673,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestFactorySerialization::test_string_list,703e3928470d644c3d40dbccbb11fc0e,failed,passed,True,0.6742081567645073,1.3993983045220375,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestFactorySerialization::test_string_list,0da1f09772ed8d01b98753b8c8c40bec,failed,passed,True,0.6742305681109428,1.8661257028579712,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestMagicMethods::test_not_multiple_instance,0a6bf423d3483e35865630406c206650,failed,passed,True,0.6696617156267166,1.3912293538451195,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestMagicMethods::test_not_multiple_instance,e21ef0e2e42b7f3079f489fa2c87e5a6,failed,passed,True,0.673297643661499,1.8705540150403976,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestMagicMethods::test_validate_multiplicity,b657cb4ca565a152c781f14111fe070f,failed,passed,True,0.6754540503025055,1.4033724963665009,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestMagicMethods::test_validate_multiplicity,39d47af16457259a4a35020744e33349,failed,passed,True,0.6764044314622879,1.8685792833566666,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestMagicMethods::test_validate_profile_off,e15039da033742b1d8314241da72134d,failed,passed,True,0.6739374324679375,1.3979076743125916,"
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
p = model.Person()
p2 = model.Activity()
","
model.factory.auto_assign_id = True
model.factory.auto_id_type = 'int'
","
model.factory.auto_id_type = 'int'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestMagicMethods::test_validate_profile_off,f3784b9f370cae79d00bc1dc4dd0ef5d,failed,passed,True,0.6749084889888763,1.8622931465506554,"
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
p = model.Person()
p2 = model.Activity()
self.assertEqual(int(p.id[(- 1)]), (int(p2.id[(- 1)]) - 1))
p3 = model.TimeSpan()
","
model.factory.auto_assign_id = True
model.factory._auto_id_segments = {}
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
model.Activity._uri_segment = model.Person._uri_segment
","
model.factory.auto_id_type = 'int-per-segment'
"
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,tests/test_model.py::TestPropertyCache::test_cache_hierarchy,7e217c30d987999f0b6164af0b9d66f1,failed,passed,False,,
crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,tests/test_model.py::TestPropertyCache::test_cache_hierarchy,ef58ae7718616a3acbd23aef3e903014,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[1-0.0],tests/test_settings.py::test_delitem[0-0],tests/test_settings.py::test_get[1-0.0],3767e3e6ca711b303a4297a149bed5ac,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[1-0.0],tests/test_settings.py::test_delitem[1-0],tests/test_settings.py::test_get[1-0.0],9147dbe24573192137c8a760c790d26a,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[0-0.0],tests/test_settings.py::test_delitem[0-0],tests/test_settings.py::test_getattr[0-0.0],f3e625fc98f80b20e24c4b1d75fcec18,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[0-0.0],tests/test_settings.py::test_delitem[1-0],tests/test_settings.py::test_getattr[0-0.0],ed7c7703d161776da18985c59db85781,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[1-0.0],tests/test_settings.py::test_delitem[0-0],tests/test_settings.py::test_getattr[1-0.0],d094f58ed0e0be37ce1ba4f145c0f1c5,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[1-0.0],tests/test_settings.py::test_delitem[1-0],tests/test_settings.py::test_getattr[1-0.0],b1f7a771d1e2b89e8845d1f777d8440b,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[0-0.0],tests/test_settings.py::test_delitem[0-0],tests/test_settings.py::test_getitem[0-0.0],0081f1987fb39fc68156cb9386acb3ab,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[0-0.0],tests/test_settings.py::test_delitem[1-0],tests/test_settings.py::test_getitem[0-0.0],18986c7c4f7d346045b3f0c782d7a90f,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[0-1],tests/test_settings.py::test_delitem[0-0],tests/test_settings.py::test_getitem[0-1],52ea7221531778b0ec1a34329a2f9a06,failed,passed,False,0.8050327375531197,1.1509618163108826,"
with pytest.raises(KeyError):
    test_setting[test_key]
","
with pytest.raises(KeyError):
    test_setting[test_key]
"
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[0-1],tests/test_settings.py::test_delitem[1-0],tests/test_settings.py::test_getitem[0-1],0b0d8278cebc3e7bcce7a47cdb801081,failed,passed,False,0.810177244246006,1.1578325480222702,"
with pytest.raises(KeyError):
    test_setting[test_key]
","
with pytest.raises(KeyError):
    test_setting[test_key]
"
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[2-0.0],tests/test_settings.py::test_delitem[0-0],tests/test_settings.py::test_getitem[2-0.0],4e12dc9a9867b0d24cdeb70246a1a6d0,failed,passed,False,,
enpyronments,0848c55a2a1b132b3beba94265c103ba49385c8f,tests/test_settings.py::test_delitem[2-0.0],tests/test_settings.py::test_delitem[1-0],tests/test_settings.py::test_getitem[2-0.0],eca42cc78ceec612282446727e5419a0,failed,passed,False,,
fastapi-sqlalchemy,8ddf0edab22873365441757107ce21234bc09f8f,tests/test_session.py::test_init,tests/test_session.py::test_db_context_temporary_session_args,tests/test_session.py::test_inside_route_without_middleware_fails,2d37c2c7915a03fc892bf5bb34a517a9,failed,passed,False,,
fastapi-sqlalchemy,8ddf0edab22873365441757107ce21234bc09f8f,tests/test_session.py::test_init,tests/test_session.py::test_init_correct_optional_args,tests/test_session.py::test_inside_route_without_middleware_fails,1fa9b3a6e33a781bbfc0a5dd58ec8649,failed,passed,False,,
fastapi-sqlalchemy,8ddf0edab22873365441757107ce21234bc09f8f,tests/test_session.py::test_init,tests/test_session.py::test_db_context_temporary_session_args,tests/test_session.py::test_outside_of_route_without_middleware_fails,c316510c8b0767a5c916cb9e347d14e3,failed,passed,False,,
fastapi-sqlalchemy,8ddf0edab22873365441757107ce21234bc09f8f,tests/test_session.py::test_init,tests/test_session.py::test_init_correct_optional_args,tests/test_session.py::test_outside_of_route_without_middleware_fails,ecbbdecae8b4f35f750e2c2fb39b244f,failed,passed,False,,
feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_missing_data_imputer.py::test_RandomSampleImputer,tests/test_missing_data_imputer.py::test_ArbitraryNumberImputer,88867c5c6ab552912f902c85bfefc309,failed,passed,True,0.802928514778614,2.6746349707245827,"
ref = pd.DataFrame(ref)
assert (imputer.variables == ['City', 'Studies'])
assert (imputer.random_state == ['Marks', 'Age'])
assert (imputer.seed == 'observation')
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
imputer = RandomSampleImputer(variables=['City', 'Studies'], random_state='Age', seed='observation')
dataframe_na['Age'] = dataframe_na['Age'].fillna(1)
X_transformed = imputer.fit_transform(dataframe_na)
ref = {'Name': ['tom', 'nick', 'krish', np.nan, 'peter', np.nan, 'fred', 'sam'], 'City': ['London', 'Manchester', 'Manchester', 'Manchester', 'London', 'London', 'Bristol', 'Manchester'], 'Studies': ['Bachelor', 'Bachelor', 'Masters', 'Masters', 'Bachelor', 'PhD', 'None', 'Masters'], 'Age': [20, 21, 19, np.nan, 23, 40, 41, 37], 'Marks': [0.9, 0.8, 0.7, np.nan, 0.3, np.nan, 0.8, 0.6], 'dob': pd.date_range('2020-02-24', periods=8, freq='T')}
ref = pd.DataFrame(ref)
assert (imputer.random_state == ['Age'])
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
with pytest.raises(ValueError):
    RandomSampleImputer(seed='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seeding_method='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='general', random_state='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='observation', random_state=None)
with pytest.raises(ValueError):
    imputer = RandomSampleImputer(seed='observation', random_state='arbitrary')
    imputer.fit(dataframe_na)
","
ref = pd.DataFrame(ref)
assert (imputer.variables == ['City', 'Studies'])
assert (imputer.random_state == ['Marks', 'Age'])
assert (imputer.seed == 'observation')
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
imputer = RandomSampleImputer(variables=['City', 'Studies'], random_state='Age', seed='observation')
dataframe_na['Age'] = dataframe_na['Age'].fillna(1)
X_transformed = imputer.fit_transform(dataframe_na)
ref = {'Name': ['tom', 'nick', 'krish', np.nan, 'peter', np.nan, 'fred', 'sam'], 'City': ['London', 'Manchester', 'Manchester', 'Manchester', 'London', 'London', 'Bristol', 'Manchester'], 'Studies': ['Bachelor', 'Bachelor', 'Masters', 'Masters', 'Bachelor', 'PhD', 'None', 'Masters'], 'Age': [20, 21, 19, np.nan, 23, 40, 41, 37], 'Marks': [0.9, 0.8, 0.7, np.nan, 0.3, np.nan, 0.8, 0.6], 'dob': pd.date_range('2020-02-24', periods=8, freq='T')}
ref = pd.DataFrame(ref)
assert (imputer.random_state == ['Age'])
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
with pytest.raises(ValueError):
    RandomSampleImputer(seed='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seeding_method='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='general', random_state='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='observation', random_state=None)
with pytest.raises(ValueError):
    imputer = RandomSampleImputer(seed='observation', random_state='arbitrary')
    imputer.fit(dataframe_na)
","
ref = pd.DataFrame(ref)
assert (imputer.variables == ['City', 'Studies'])
assert (imputer.random_state == ['Marks', 'Age'])
assert (imputer.seed == 'observation')
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
imputer = RandomSampleImputer(variables=['City', 'Studies'], random_state='Age', seed='observation')
dataframe_na['Age'] = dataframe_na['Age'].fillna(1)
X_transformed = imputer.fit_transform(dataframe_na)
ref = {'Name': ['tom', 'nick', 'krish', np.nan, 'peter', np.nan, 'fred', 'sam'], 'City': ['London', 'Manchester', 'Manchester', 'Manchester', 'London', 'London', 'Bristol', 'Manchester'], 'Studies': ['Bachelor', 'Bachelor', 'Masters', 'Masters', 'Bachelor', 'PhD', 'None', 'Masters'], 'Age': [20, 21, 19, np.nan, 23, 40, 41, 37], 'Marks': [0.9, 0.8, 0.7, np.nan, 0.3, np.nan, 0.8, 0.6], 'dob': pd.date_range('2020-02-24', periods=8, freq='T')}
ref = pd.DataFrame(ref)
assert (imputer.random_state == ['Age'])
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
with pytest.raises(ValueError):
    RandomSampleImputer(seed='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seeding_method='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='general', random_state='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='observation', random_state=None)
with pytest.raises(ValueError):
    imputer = RandomSampleImputer(seed='observation', random_state='arbitrary')
    imputer.fit(dataframe_na)
","
ref = pd.DataFrame(ref)
assert (imputer.variables == ['City', 'Studies'])
assert (imputer.random_state == ['Marks', 'Age'])
assert (imputer.seed == 'observation')
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
imputer = RandomSampleImputer(variables=['City', 'Studies'], random_state='Age', seed='observation')
dataframe_na['Age'] = dataframe_na['Age'].fillna(1)
X_transformed = imputer.fit_transform(dataframe_na)
ref = {'Name': ['tom', 'nick', 'krish', np.nan, 'peter', np.nan, 'fred', 'sam'], 'City': ['London', 'Manchester', 'Manchester', 'Manchester', 'London', 'London', 'Bristol', 'Manchester'], 'Studies': ['Bachelor', 'Bachelor', 'Masters', 'Masters', 'Bachelor', 'PhD', 'None', 'Masters'], 'Age': [20, 21, 19, np.nan, 23, 40, 41, 37], 'Marks': [0.9, 0.8, 0.7, np.nan, 0.3, np.nan, 0.8, 0.6], 'dob': pd.date_range('2020-02-24', periods=8, freq='T')}
ref = pd.DataFrame(ref)
assert (imputer.random_state == ['Age'])
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
with pytest.raises(ValueError):
    RandomSampleImputer(seed='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seeding_method='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='general', random_state='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='observation', random_state=None)
with pytest.raises(ValueError):
    imputer = RandomSampleImputer(seed='observation', random_state='arbitrary')
    imputer.fit(dataframe_na)
","
ref = pd.DataFrame(ref)
assert (imputer.variables == ['City', 'Studies'])
assert (imputer.random_state == ['Marks', 'Age'])
assert (imputer.seed == 'observation')
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
imputer = RandomSampleImputer(variables=['City', 'Studies'], random_state='Age', seed='observation')
dataframe_na['Age'] = dataframe_na['Age'].fillna(1)
X_transformed = imputer.fit_transform(dataframe_na)
ref = {'Name': ['tom', 'nick', 'krish', np.nan, 'peter', np.nan, 'fred', 'sam'], 'City': ['London', 'Manchester', 'Manchester', 'Manchester', 'London', 'London', 'Bristol', 'Manchester'], 'Studies': ['Bachelor', 'Bachelor', 'Masters', 'Masters', 'Bachelor', 'PhD', 'None', 'Masters'], 'Age': [20, 21, 19, np.nan, 23, 40, 41, 37], 'Marks': [0.9, 0.8, 0.7, np.nan, 0.3, np.nan, 0.8, 0.6], 'dob': pd.date_range('2020-02-24', periods=8, freq='T')}
ref = pd.DataFrame(ref)
assert (imputer.random_state == ['Age'])
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
with pytest.raises(ValueError):
    RandomSampleImputer(seed='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seeding_method='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='general', random_state='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='observation', random_state=None)
with pytest.raises(ValueError):
    imputer = RandomSampleImputer(seed='observation', random_state='arbitrary')
    imputer.fit(dataframe_na)
","
ref = pd.DataFrame(ref)
assert (imputer.variables == ['City', 'Studies'])
assert (imputer.random_state == ['Marks', 'Age'])
assert (imputer.seed == 'observation')
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
imputer = RandomSampleImputer(variables=['City', 'Studies'], random_state='Age', seed='observation')
dataframe_na['Age'] = dataframe_na['Age'].fillna(1)
X_transformed = imputer.fit_transform(dataframe_na)
ref = {'Name': ['tom', 'nick', 'krish', np.nan, 'peter', np.nan, 'fred', 'sam'], 'City': ['London', 'Manchester', 'Manchester', 'Manchester', 'London', 'London', 'Bristol', 'Manchester'], 'Studies': ['Bachelor', 'Bachelor', 'Masters', 'Masters', 'Bachelor', 'PhD', 'None', 'Masters'], 'Age': [20, 21, 19, np.nan, 23, 40, 41, 37], 'Marks': [0.9, 0.8, 0.7, np.nan, 0.3, np.nan, 0.8, 0.6], 'dob': pd.date_range('2020-02-24', periods=8, freq='T')}
ref = pd.DataFrame(ref)
assert (imputer.random_state == ['Age'])
pd.testing.assert_frame_equal(imputer.X_[['City', 'Studies']], dataframe_na[['City', 'Studies']])
pd.testing.assert_frame_equal(X_transformed[['City', 'Studies']], ref[['City', 'Studies']], check_dtype=False)
with pytest.raises(ValueError):
    RandomSampleImputer(seed='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seeding_method='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='general', random_state='arbitrary')
with pytest.raises(ValueError):
    RandomSampleImputer(seed='observation', random_state=None)
with pytest.raises(ValueError):
    imputer = RandomSampleImputer(seed='observation', random_state='arbitrary')
    imputer.fit(dataframe_na)
"
fissa,2077a8c8a029948dcf1d4c352f785700f42aff9f,fissa/tests/test_core.py::TestExperimentA::test_lowmemorymode,fissa/tests/test_core.py::TestExperimentA::test_manualhandler,fissa/tests/test_core.py::TestExperimentA::test_imagelistloaded_roizip,35b48ff7858c451ac4340b49b7729307,failed,passed,True,3.0686068385839462,5.711537905037403,"
image_path = os.path.join(self.resources_dir, self.images_dir)
roi_path = os.path.join(self.resources_dir, self.roi_zip_path)
exp = core.Experiment(image_path, roi_path, self.output_dir, datahandler_custom=datahandler)
exp.separate()
"
geom,d12b381706ee620cba1c6a6cb45ab7815e5a1dc9,test_geom.py::test_veccross,test_geom.py::test_circ_intersects,test_geom.py::test_epsilon,8338273e23551e7be56745cf318eef6f,failed,passed,True,0.5691336542367935,2.852148801088333,"
geom.set_tolerance((10 ** (- 6)))
posv1 = ((0, 0), (0.0023, (- 0.0031)), (5782, 8792.1), (4, 5))
radii1 = (5, 0.00401, 33.9782, 1)
posv2 = ((0, 0), ((- 60793), 20034), (5750, 8778), (5, 4))
radii2 = (0, 64008.98293, 35, 10)
posv3 = ((0, 5.000002), ((- 60793), 20034), ((- 5782), (- 8792.1)), (10, 10))
radii3 = (1e-06, 64008.98292, 33.9782, 0.5)
for (pos1, r1, pos2, r2, pos3, r3) in zip(posv1, radii1, posv2, radii2, posv3, radii3):
    c1 = geom.Circle(pos1, r1)
    c2 = geom.Circle(pos2, r2)
    c3 = geom.Circle(pos3, r3)
    assert c1.intersects(c2)
","
geom.set_tolerance((10 ** (- 6)))
posv1 = ((0, 0), (0.0023, (- 0.0031)), (5782, 8792.1), (4, 5))
radii1 = (5, 0.00401, 33.9782, 1)
posv2 = ((0, 0), ((- 60793), 20034), (5750, 8778), (5, 4))
radii2 = (0, 64008.98293, 35, 10)
posv3 = ((0, 5.000002), ((- 60793), 20034), ((- 5782), (- 8792.1)), (10, 10))
","
geom.set_tolerance((10 ** (- 6)))
posv1 = ((0, 0), (0.0023, (- 0.0031)), (5782, 8792.1), (4, 5))
radii1 = (5, 0.00401, 33.9782, 1)
","
geom.set_tolerance((10 ** (- 6)))
radii1 = (5, 0.00401, 33.9782, 1)
","
geom.set_tolerance((10 ** (- 6)))
"
geom,d12b381706ee620cba1c6a6cb45ab7815e5a1dc9,test_geom.py::test_veccross,test_geom.py::test_circarea,test_geom.py::test_epsilon,d5c24de675b085a9e333945592a26339,failed,passed,True,0.5541003942489624,3.154467061161995,"
geom.set_tolerance(1e-06)
centers = ((0, 0), ((- 1.0), 1.0), (10000, 1e-06), ((- 7892822), 1902383))
radii = (33.19, 0, 0.02003, 78892)
areas = (0, (16 * math.pi), 2.5e-05, 3423423)
eas = (3460.7033830094, 0, 0.0012604098, 19553108257.549755)
ers = (0, 4, 0.00282095, 1043.8914625)
for (center, r, area, ea, er) in zip(centers, radii, areas, eas, ers):
    c = geom.Circle(center, r)
    assert (abs((c.area - ea)) < geom.eps)
","
geom.set_tolerance(1e-06)
centers = ((0, 0), ((- 1.0), 1.0), (10000, 1e-06), ((- 7892822), 1902383))
radii = (33.19, 0, 0.02003, 78892)
areas = (0, (16 * math.pi), 2.5e-05, 3423423)
eas = (3460.7033830094, 0, 0.0012604098, 19553108257.549755)
ers = (0, 4, 0.00282095, 1043.8914625)
for (center, r, area, ea, er) in zip(centers, radii, areas, eas, ers):
    c = geom.Circle(center, r)
","
geom.set_tolerance(1e-06)
centers = ((0, 0), ((- 1.0), 1.0), (10000, 1e-06), ((- 7892822), 1902383))
radii = (33.19, 0, 0.02003, 78892)
areas = (0, (16 * math.pi), 2.5e-05, 3423423)
","
geom.set_tolerance(1e-06)
centers = ((0, 0), ((- 1.0), 1.0), (10000, 1e-06), ((- 7892822), 1902383))
","
geom.set_tolerance(1e-06)
"
kanren,bacc7eb5895c348e348c1b5291ddf188f88c5c88,tests/test_assoccomm.py::test_assoccomm_objects,tests/test_assoccomm.py::test_assoc_flatten,tests/test_assoccomm.py::test_eq_assoccomm,a89c360cf70875425fdedb53b006f3ad,passed,passed,,,
kanren,bacc7eb5895c348e348c1b5291ddf188f88c5c88,tests/test_assoccomm.py::test_assoccomm_objects,tests/test_assoccomm.py::test_assoccomm_algebra,tests/test_assoccomm.py::test_eq_assoccomm,b41637a6136f03d624b4637a75d0384b,failed,passed,True,1.1941789910197258,4.231509305536747,"
add = 'add'
mul = 'mul'
commutative.index.clear()
commutative.facts.clear()
associative.index.clear()
associative.facts.clear()
fact(commutative, add)
","
commutative.facts.clear()
associative.index.clear()
associative.facts.clear()
fact(commutative, add)
","
associative.facts.clear()
fact(commutative, add)
","
associative.facts.clear()
"
