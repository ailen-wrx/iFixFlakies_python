Project_Name,Project_URL,Project_Hash,Test_id,OD_Type,Polluter_or_Setter,Cleaner,Diff,Path
BT-Tracker,https://github.com/nordwind80/BT-Tracker,558c15b399871c1ca11d0c4ae1eb598e3060931e,Tracker/tests/test_event.py::TestEvent::test_object,brittle,Tracker/tests/test_event.py::TestEvent::test_state_change,,"17a18
>         status.state = False
",BT-Tracker/ipflakies_result/d94526b0/patch/test_event_patch_91e72946.patch
Breathe,https://github.com/mrob95/Breathe,4600818e24f4156cd7bb8cc0f43886b27323968e,tests/test_loading.py::test_loading,brittle,tests/test_loading.py::test_loading_failure,,"34a35,39
>     with open(file_path, 'w') as f:
>         f.write('\nfrom breathe import Breathe\nfrom ..testutils import DoNothing\n\nBreathe.add_commands(,,,\n    None,\n    {\n        ""apple"": DoNothing(),\n    }\n)\n')
>     modules = {'tests': {'my_grammar': ['fruit']}}
>     Breathe.load_modules(modules)
>     assert (len(Breathe.modules) == 1)
",Breathe/ipflakies_result/55d0ab3c/patch/test_loading_patch_1dd2b94c.patch
Breathe,https://github.com/mrob95/Breathe,4600818e24f4156cd7bb8cc0f43886b27323968e,tests/test_loading.py::test_loading_failure,victim,tests/test_merger.py::test_core_commands,tests/test_loading.py::test_clear,"11a12
>     Breathe.clear()
",Breathe/ipflakies_result/4170278e/patch/test_loading_patch_6711ce75.patch
Breathe,https://github.com/mrob95/Breathe,4600818e24f4156cd7bb8cc0f43886b27323968e,tests/test_loading.py::test_reloading,brittle,tests/test_loading.py::test_loading_failure,,"51a52,56
>     with open(file_path, 'w') as f:
>         f.write('\nfrom breathe import Breathe\nfrom ..testutils import DoNothing\n\nBreathe.add_commands(,,,\n    None,\n    {\n        ""apple"": DoNothing(),\n    }\n)\n')
>     modules = {'tests': {'my_grammar': ['fruit']}}
>     Breathe.load_modules(modules)
>     assert (len(Breathe.modules) == 1)
",Breathe/ipflakies_result/2ec854e9/patch/test_loading_patch_1dd2b94c.patch
Breathe,https://github.com/mrob95/Breathe,4600818e24f4156cd7bb8cc0f43886b27323968e,tests/test_merger.py::test_context_commands,brittle,tests/test_merger.py::test_core_commands,,"41a42
>     Breathe.add_commands(None, {'test one': DoNothing(), 'test two': DoNothing(), 'test three': DoNothing(), 'banana [<n>]': (DoNothing() * Repeat('n'))}, [IntegerRef('n', 1, 10, 1)])
",Breathe/ipflakies_result/a343ba34/patch/test_merger_patch_0cac14c1.patch
Breathe,https://github.com/mrob95/Breathe,4600818e24f4156cd7bb8cc0f43886b27323968e,tests/test_merger.py::test_core_commands,victim,tests/test_command_context.py::test_manual_context,tests/test_command_context.py::test_manual_context_noccr,"27a28
>     engine.mimic(['disable', 'test'])
",Breathe/ipflakies_result/8f0372f0/patch/test_merger_patch_e84d29f7.patch
Breathe,https://github.com/mrob95/Breathe,4600818e24f4156cd7bb8cc0f43886b27323968e,tests/test_merger.py::test_invalid,brittle,tests/test_command_context.py::test_manual_context,,"76a77
>     Breathe.add_commands(CommandContext('test'), {'pizza': DoNothing(), 'curry': DoNothing()})
",Breathe/ipflakies_result/b5d99e0c/patch/test_merger_patch_80641bc9.patch
Breathe,https://github.com/mrob95/Breathe,4600818e24f4156cd7bb8cc0f43886b27323968e,tests/test_merger.py::test_noccr_commands,brittle,tests/test_merger.py::test_global_extras,,"53a54
>     Breathe.add_global_extras(Dictation('text'))
",Breathe/ipflakies_result/a3dc25d2/patch/test_merger_patch_cd15fbd5.patch
Flask-JWT-Router,https://github.com/joegasewicz/Flask-JWT-Router,0fb1e256c81409be6f08d8be12f07e5f58b4f914,tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client3-None-401],victim,tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client0-None-200],tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client1-None-401],"87a88
>         rv = jwt_router_client.get('/test')
",Flask-JWT-Router/ipflakies_result/198fd21d/patch/test_routing_patch_e9854ebb.patch
Flask-JWT-Router,https://github.com/joegasewicz/Flask-JWT-Router,0fb1e256c81409be6f08d8be12f07e5f58b4f914,tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client3-None-401],victim,tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client0-None-200],tests/test_routing.py::TestRouting::test_jwt_route[jwt_router_client2-None-401],"87a88
>         rv = jwt_router_client.get('/test')
",Flask-JWT-Router/ipflakies_result/198fd21d/patch/test_routing_patch_7ef6bafb.patch
GOApy,https://github.com/leopepe/GOApy,a8e0dfe5f0f593107884ad54f89a27f67ee28129,tests/Sensor_test.py::SensorsTest::test_remove_sensor_success,brittle,tests/Sensor_test.py::SensorsTest::test_add_success,,"27a28,31
>         self.sensors = Sensors()
>         self.sensors.add(name='SenseTmpDirState', shell='if [ -d ""/tmp/goap_tmp"" ]; then echo -n ""exist""; else echo -n ""not_exist""; fi', binding='tmp_dir_state')
>         self.sensors.add(name='SenseTmpDirContent', shell='[ -f /tmp/goap_tmp/.token ] && echo -n ""token_found"" || echo -n ""token_not_found""', binding='tmp_dir_content')
>         assert ('SenseTmpDirState' == str(self.sensors.get(name='SenseTmpDirState')))
",GOApy/ipflakies_result/95d2bae3/patch/Sensor_test_patch_71cc17cd.patch
HikLoad,https://github.com/Tedyst/HikLoad,b3eb7be65bd34040992e1b7b15f23ff4ce2e8dc4,tests/test_config.py::test_envvar,brittle,tests/test_config.py::test_defaultvar,,"9a10
>     config.CONFIG['server'] = '1'
",HikLoad/ipflakies_result/8d2f82d8/patch/test_config_patch_75f5c393.patch
IOCynergy,https://github.com/omersaraf/IOCynergy,1821423680f741d8ca06bcc6a02c8b21156f9ba0,cynergy/tests/test_register_multiple.py::test_register_multiple,victim,cynergy/tests/test_register_multiple.py::test_multiple_list_arguments,cynergy/tests/test_class_mapping.py::test_class_mapping,"37a38
>     container.initialize()
",IOCynergy/ipflakies_result/0f33da25/patch/test_register_multiple_patch_06d164b9.patch
LabIFSC,https://github.com/gjvnq/LabIFSC,cb56b75f51eb54680d0b81f4c87aa0234538a2a8,tests/medida_test.py::test_medida_si_2,brittle,tests/medida_format_test.py::test_medida_format_A1,,"69a70
>     m = Medida((31.5467, 0.052), 'ft^2')
",LabIFSC/ipflakies_result/1eff5e51/patch/medida_test_patch_d0b3dbba.patch
LabIFSC,https://github.com/gjvnq/LabIFSC,cb56b75f51eb54680d0b81f4c87aa0234538a2a8,tests/medida_test.py::test_medida_si_3,brittle,tests/medida_format_test.py::test_medida_format_A1,,"76a77
>     m = Medida((31.5467, 0.052), 'ft^2')
",LabIFSC/ipflakies_result/bc09b078/patch/medida_test_patch_d0b3dbba.patch
NestedDictionary,https://github.com/cahoy/NestedDictionary,881f0ea8af36a60fcd1b9d7a84b1aec4cd7072b2,easy_dict/tests/test_01_default.py::test_del,brittle,easy_dict/tests/test_01_default.py::test_quick_assign,,"47a48
>     x[123] = 'abc'
",NestedDictionary/ipflakies_result/2167d10c/patch/test_01_default_patch_f4ffda46.patch
OccamTools,https://github.com/mortele/OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_progress_bars,victim,test/test_histogram.py::test_histogram_input_type,test/test_occam_data.py::test_occam_data_save_load,"197a198
>     shutil.rmtree(class_dir)
",OccamTools/ipflakies_result/aa1c2149/patch/test_occam_data_patch_f5595f1a.patch
OccamTools,https://github.com/mortele/OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_progress_bars,victim,test/test_histogram.py::test_histogram_dimension,test/test_occam_data.py::test_occam_data_save_load,"197a198
>     shutil.rmtree(class_dir)
",OccamTools/ipflakies_result/aa1c2149/patch/test_occam_data_patch_f5595f1a.patch
OccamTools,https://github.com/mortele/OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_progress_bars,victim,test/test_histogram.py::test_histogram_time_steps,test/test_occam_data.py::test_occam_data_save_load,"197a198
>     shutil.rmtree(class_dir)
",OccamTools/ipflakies_result/aa1c2149/patch/test_occam_data_patch_f5595f1a.patch
OccamTools,https://github.com/mortele/OccamTools,26c47709f6b870c89403f03ade0950de9f301639,test/test_occam_data.py::test_occam_data_progress_bars,victim,test/test_occam_data.py::test_occam_data_not_equal,test/test_occam_data.py::test_occam_data_save_load,"197a198
>     shutil.rmtree(class_dir)
",OccamTools/ipflakies_result/aa1c2149/patch/test_occam_data_patch_f5595f1a.patch
PyGraph,https://github.com/Rickecr/PyGraph,e81c3a0f543f5bfcda1a603c6dcecde13d582c57,__tests__/test_simple_graph.py::TestSimpleGraph::test_is_terminal,brittle,__tests__/test_simple_graph.py::TestSimpleGraph::test_add_vertex,,"27a28,29
>         value = 'b'
>         vertex = self.graph.add_vertex(value)
",PyGraph/ipflakies_result/ac48c7e8/patch/test_simple_graph_patch_ac7ee3a9.patch
PyGraph,https://github.com/Rickecr/PyGraph,e81c3a0f543f5bfcda1a603c6dcecde13d582c57,__tests__/test_simple_graph.py::TestSimpleGraph::test_vertex_exists,brittle,__tests__/test_simple_graph.py::TestSimpleGraph::test_num_vertex,,"33a34
>         self.graph.add_vertex('a')
",PyGraph/ipflakies_result/a9982c47/patch/test_simple_graph_patch_e18b45d1.patch
Tale,https://github.com/irmen/Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,victim,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_mudobjects.py::TestLocations::test_message_nearby_location,"140a141,146
>         plaza = Location('plaza')
>         road = Location('road')
>         wiretap_plaza = Wiretap(plaza)
>         plaza.message_nearby_locations('boing')
>         pubsub.sync()
>         self.assertEqual([], wiretap_plaza.msgs, 'the plaza doesnt receive tells')
",Tale/ipflakies_result/4d4fddac/patch/test_pubsub_patch_3c47b5c6.patch
Tale,https://github.com/irmen/Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,victim,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_mudobjects.py::TestLiving::test_move,"140a141,144
>         attic = Location('attic')
>         rat3 = Living('rat3', 'n', race='rodent')
>         rat3.move(attic, direction_names=['somewhere'])
>         pubsub.sync()
",Tale/ipflakies_result/4d4fddac/patch/test_pubsub_patch_54b60f24.patch
Tale,https://github.com/irmen/Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,victim,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_player.py::TestPlayer::test_wiretap,"140a141,146
>         attic = Location('Attic', 'A dark attic.')
>         player = Player('fritz', 'm')
>         io = ConsoleIo(None)
>         pc = PlayerConnection(player, io)
>         pubsub.sync()
>         output = pc.get_output()
",Tale/ipflakies_result/4d4fddac/patch/test_pubsub_patch_08bc6f78.patch
Tale,https://github.com/irmen/Tale,a2a26443465ab6978b32d9253e833471500e7b68,tests/test_pubsub.py::TestPubsub::test_unsubscribe_all,victim,tests/test_pubsub.py::TestPubsub::test_idletime,tests/test_pubsub.py::TestPubsub::test_destroy,"140a141,148
>         sync()
>         s1 = topic('testA')
>         s2 = topic('testB')
>         s1.send('123')
>         p = pending()
>         self.assertIn('testA', p)
>         self.assertIn('testB', p)
>         s1.destroy()
",Tale/ipflakies_result/4d4fddac/patch/test_pubsub_patch_44829275.patch
alphanum_code,https://github.com/ylaizet/alphanum_code,fb5cd313dc41f046aac01ff01d6e1561d17894a6,tests/test_alphanum_code.py::test_next_code,brittle,tests/test_alphanum_code.py::test_init_code,,"1,34c1,35
< #!/usr/bin/env python
< # -*- coding: utf-8 -*-
< 
< """"""Test AlphanumCOde.
< 
< Usage:
<     python -m pytest tests/
< 
< """"""
< 
< import datetime
< import pytest
< import os
< from alphanum_code import AlphaNumCodeManager
< 
< INIT_CODE = ""52Z9Z""
< 
< 
< @pytest.fixture(scope=""module"")
< def coder():
<     manager = AlphaNumCodeManager(""sqlite:///tests/codes.sqlite"", code_size=5, init_code=INIT_CODE)
<     yield manager
<     os.remove(""tests/codes.sqlite"")
< 
< 
< def test_init_code(coder):
<     code = coder.next_code(""init code test"")
<     assert code == INIT_CODE
< 
< 
< def test_next_code(coder):
<     coder.next_code()
<     code = coder.next_code(""next code test"")
<     assert code == ""52ZA1""
---
> #!/usr/bin/env python
> # -*- coding: utf-8 -*-
> 
> """"""Test AlphanumCOde.
> 
> Usage:
>     python -m pytest tests/
> 
> """"""
> 
> import datetime
> import pytest
> import os
> from alphanum_code import AlphaNumCodeManager
> 
> INIT_CODE = ""52Z9Z""
> 
> 
> @pytest.fixture(scope=""module"")
> def coder():
>     manager = AlphaNumCodeManager(""sqlite:///tests/codes.sqlite"", code_size=5, init_code=INIT_CODE)
>     yield manager
>     os.remove(""tests/codes.sqlite"")
> 
> 
> def test_init_code(coder):
>     code = coder.next_code(""init code test"")
>     assert code == INIT_CODE
> 
> 
> def test_next_code(coder):
>     code = coder.next_code('init code test')
>     coder.next_code()
>     code = coder.next_code(""next code test"")
>     assert code == ""52ZA1""
",alphanum_code/ipflakies_result/690d14c3/patch/test_alphanum_code_patch_e32586eb.patch
api-python,https://github.com/datacommonsorg/api-python,6d09ca1557da0af893f008f7302801f12afc2d46,datacommons/test/set_api_key_test.py::TestApiKey::test_query_no_api_key,brittle,datacommons/test/set_api_key_test.py::TestApiKey::test_query_w_api_key,,"76a77
>         dc.set_api_key(_TEST_API_KEY)
",api-python/ipflakies_result/41741525/patch/set_api_key_test_patch_e80d8d75.patch
api-python,https://github.com/datacommonsorg/api-python,6d09ca1557da0af893f008f7302801f12afc2d46,datacommons/test/set_api_key_test.py::TestApiKey::test_send_request_no_api_key,brittle,datacommons/test/set_api_key_test.py::TestApiKey::test_query_w_api_key,,"82a83
>         dc.set_api_key(_TEST_API_KEY)
",api-python/ipflakies_result/301df477/patch/set_api_key_test_patch_e80d8d75.patch
atlasclient,https://github.com/jpoullet2000/atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,victim,tests/test_models.py::TestDiscoveryREST::test_search_basic_get,tests/test_client.py::TestClient::test_atlas_client,"454a455
>         client = Atlas('localhost', port=21000, username='admin', password='admin')
",atlasclient/ipflakies_result/6443f690/patch/test_models_patch_ef06bded.patch
atlasclient,https://github.com/jpoullet2000/atlasclient,02b3e7d9a6596d1123fc22b6bfed08d60105d19e,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,victim,tests/test_models.py::TestDiscoveryREST::test_search_basic_get,tests/test_models.py::TestEntityREST::test_entity_post,"454a455
>         mocker.patch.object(atlas_client.entity_post.client, 'post')
",atlasclient/ipflakies_result/6443f690/patch/test_models_patch_a6f47ca2.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_login.py::test_login,authnzerver/tests/test_auth_deletesessions.py::test_sessions_delete_userid,"24a25,51
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-sessiondelete@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (emailverify['success'] is True)
>     assert (emailverify['user_role'] == 'authenticated')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token1 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Searchzilla Oxide', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.2', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Pear Adventure', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.3', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     sessions_killed = actions.auth_delete_sessions_userid({'user_id': emailverify['user_id'], 'session_token': session_token3['session_token'], 'keep_current_session': True, 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (sessions_killed['success'] is True)
>     session_check_1 = actions.auth_session_exists({'session_token': session_token1['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (session_check_1['success'] is False)
>     session_check_2 = actions.auth_session_exists({'session_token': session_token2['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (session_check_2['success'] is False)
>     session_check_3 = actions.auth_session_exists({'session_token': session_token3['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (session_check_3['success'] is True)
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-sessiondelete.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_1b5340b3.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_login.py::test_login,authnzerver/tests/test_auth_lockuser.py::test_user_lock,"24a25,53
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-userlock@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (emailverify['success'] is True)
>     assert (emailverify['user_role'] == 'authenticated')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (session_token2['success'] is True)
>     assert (session_token2['session_token'] is not None)
>     user_locked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'lock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)
>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (session_token3['success'] is True)
>     assert (session_token3['session_token'] is not None)
>     login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (login['success'] is False)
>     user_unlocked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'unlock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)
>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (session_token3['success'] is True)
>     assert (session_token3['session_token'] is not None)
>     login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (login['success'] is True)
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-userlock.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_22479437.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_login.py::test_login,authnzerver/tests/test_auth_passcheck.py::test_passcheck,"24a25,33
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-passcheck@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-passcheck.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_02380cb7.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_login.py::test_login,authnzerver/tests/test_auth_passcheck.py::test_passcheck_nosession,"24a25,40
>     try:
>         os.remove('test-passcheck.authdb.sqlite-wal')
>     except Exception:
>         pass
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-passcheck@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     pass_check = actions.auth_password_check_nosession({'email': user_payload['email'], 'password': 'incorrectponylithiumfastener', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-passcheck.authdb.sqlite', raiseonfail=True)
>     assert (pass_check['success'] is False)
>     assert (pass_check['user_id'] is None)
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-passcheck.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_26b6f5b4.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_login.py::test_login,authnzerver/tests/test_auth_permissions.py::test_role_limits,"24a25,33
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_meta', None):
>         del currproc.authdb_meta
>     if getattr(currproc, 'connection', None):
>         currproc.authdb_conn.close()
>         del currproc.authdb_conn
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_c6df2571.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_login.py::test_login,authnzerver/tests/test_internal_session_edit.py::test_internal_session_edit,"24a25,33
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_meta', None):
>         del currproc.authdb_meta
>     if getattr(currproc, 'connection', None):
>         currproc.authdb_conn.close()
>         del currproc.authdb_conn
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_7b06a266.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_login.py::test_login,authnzerver/tests/test_internal_user_edit.py::test_internal_user_edit,"24a25,28
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_7494ad32.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_loginlogout.py::test_login_logout,authnzerver/tests/test_auth_deletesessions.py::test_sessions_delete_userid,"24a25,51
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-sessiondelete@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (emailverify['success'] is True)
>     assert (emailverify['user_role'] == 'authenticated')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token1 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Searchzilla Oxide', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.2', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Pear Adventure', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.3', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     sessions_killed = actions.auth_delete_sessions_userid({'user_id': emailverify['user_id'], 'session_token': session_token3['session_token'], 'keep_current_session': True, 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (sessions_killed['success'] is True)
>     session_check_1 = actions.auth_session_exists({'session_token': session_token1['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (session_check_1['success'] is False)
>     session_check_2 = actions.auth_session_exists({'session_token': session_token2['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (session_check_2['success'] is False)
>     session_check_3 = actions.auth_session_exists({'session_token': session_token3['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (session_check_3['success'] is True)
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-sessiondelete.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_1b5340b3.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_loginlogout.py::test_login_logout,authnzerver/tests/test_auth_lockuser.py::test_user_lock,"24a25,53
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-userlock@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (emailverify['success'] is True)
>     assert (emailverify['user_role'] == 'authenticated')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (session_token2['success'] is True)
>     assert (session_token2['session_token'] is not None)
>     user_locked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'lock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)
>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (session_token3['success'] is True)
>     assert (session_token3['session_token'] is not None)
>     login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (login['success'] is False)
>     user_unlocked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'unlock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)
>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (session_token3['success'] is True)
>     assert (session_token3['session_token'] is not None)
>     login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (login['success'] is True)
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-userlock.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_22479437.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_loginlogout.py::test_login_logout,authnzerver/tests/test_auth_passcheck.py::test_passcheck,"24a25,33
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-passcheck@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-passcheck.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_02380cb7.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_loginlogout.py::test_login_logout,authnzerver/tests/test_auth_passcheck.py::test_passcheck_nosession,"24a25,40
>     try:
>         os.remove('test-passcheck.authdb.sqlite-wal')
>     except Exception:
>         pass
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-passcheck@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     pass_check = actions.auth_password_check_nosession({'email': user_payload['email'], 'password': 'incorrectponylithiumfastener', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-passcheck.authdb.sqlite', raiseonfail=True)
>     assert (pass_check['success'] is False)
>     assert (pass_check['user_id'] is None)
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-passcheck.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_26b6f5b4.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_loginlogout.py::test_login_logout,authnzerver/tests/test_auth_permissions.py::test_role_limits,"24a25,33
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_meta', None):
>         del currproc.authdb_meta
>     if getattr(currproc, 'connection', None):
>         currproc.authdb_conn.close()
>         del currproc.authdb_conn
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_c6df2571.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_loginlogout.py::test_login_logout,authnzerver/tests/test_internal_session_edit.py::test_internal_session_edit,"24a25,33
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_meta', None):
>         del currproc.authdb_meta
>     if getattr(currproc, 'connection', None):
>         currproc.authdb_conn.close()
>         del currproc.authdb_conn
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_7b06a266.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_creation.py::test_create_user,victim,authnzerver/tests/test_auth_loginlogout.py::test_login_logout,authnzerver/tests/test_internal_user_edit.py::test_internal_user_edit,"24a25,28
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
",authnzerver/ipflakies_result/8fd17596/patch/test_auth_creation_patch_7494ad32.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_permissions.py::test_role_permissions,victim,authnzerver/tests/test_auth_creation.py::test_create_user,authnzerver/tests/test_auth_deletesessions.py::test_sessions_delete_userid,"23a24,50
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-sessiondelete@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (emailverify['success'] is True)
>     assert (emailverify['user_role'] == 'authenticated')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token1 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Searchzilla Oxide', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.2', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Pear Adventure', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.3', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     sessions_killed = actions.auth_delete_sessions_userid({'user_id': emailverify['user_id'], 'session_token': session_token3['session_token'], 'keep_current_session': True, 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (sessions_killed['success'] is True)
>     session_check_1 = actions.auth_session_exists({'session_token': session_token1['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (session_check_1['success'] is False)
>     session_check_2 = actions.auth_session_exists({'session_token': session_token2['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (session_check_2['success'] is False)
>     session_check_3 = actions.auth_session_exists({'session_token': session_token3['session_token'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, raiseonfail=True, override_authdb_path='sqlite:///test-sessiondelete.authdb.sqlite')
>     assert (session_check_3['success'] is True)
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-sessiondelete.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/63a3dffe/patch/test_auth_permissions_patch_1b5340b3.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_permissions.py::test_role_permissions,victim,authnzerver/tests/test_auth_creation.py::test_create_user,authnzerver/tests/test_auth_lockuser.py::test_user_lock,"23a24,52
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-userlock@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     user_created = actions.create_new_user(user_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     emailverify = actions.set_user_emailaddr_verified({'email': user_payload['email'], 'user_id': user_created['user_id'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (emailverify['success'] is True)
>     assert (emailverify['user_role'] == 'authenticated')
>     session_payload = {'user_id': emailverify['user_id'], 'user_agent': 'Mozzarella Killerwhale', 'expires': (datetime.utcnow() + timedelta(hours=1)), 'ip_address': '1.1.1.1', 'extra_info_json': {'pref_datasets_always_private': True}, 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     session_token2 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (session_token2['success'] is True)
>     assert (session_token2['session_token'] is not None)
>     user_locked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'lock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)
>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (session_token3['success'] is True)
>     assert (session_token3['session_token'] is not None)
>     login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (login['success'] is False)
>     user_unlocked = actions.internal_toggle_user_lock({'target_userid': emailverify['user_id'], 'action': 'unlock', 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock-authdb.sqlite', raiseonfail=True)
>     session_token3 = actions.auth_session_new(session_payload, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (session_token3['success'] is True)
>     assert (session_token3['session_token'] is not None)
>     login = actions.auth_user_login({'session_token': session_token3['session_token'], 'email': user_payload['email'], 'password': user_payload['password'], 'pii_salt': 'super-secret-salt', 'reqid': 1}, override_authdb_path='sqlite:///test-userlock.authdb.sqlite')
>     assert (login['success'] is True)
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-userlock.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/63a3dffe/patch/test_auth_permissions_patch_22479437.patch
authnzerver,https://github.com/waqasbhatti/authnzerver,bc735a1c9e1c084c40854a539a000d69a50ed486,authnzerver/tests/test_auth_permissions.py::test_role_permissions,victim,authnzerver/tests/test_auth_creation.py::test_create_user,authnzerver/tests/test_auth_passcheck.py::test_passcheck,"23a24,32
>     user_payload = {'full_name': 'Test User', 'email': 'testuser-passcheck@test.org', 'password': 'aROwQin9L8nNtPTEMLXd', 'pii_salt': 'super-secret-salt', 'reqid': 1}
>     currproc = mp.current_process()
>     if getattr(currproc, 'authdb_engine', None):
>         currproc.authdb_engine.dispose()
>         del currproc.authdb_engine
>     try:
>         os.remove('test-passcheck.authdb.sqlite')
>     except Exception:
>         pass
",authnzerver/ipflakies_result/63a3dffe/patch/test_auth_permissions_patch_02380cb7.patch
autoclasswrapper,https://github.com/pierrepo/autoclasswrapper,af43dd833e5586386098d1793a59332e968069da,tests/test_output.py::TestOutputClass::test_write_dendrogram,brittle,tests/test_output.py::TestOutputClass::test_write_cluster_stats,,"104a105,108
>         res.write_class_stats()
>         res = wrapper.Output(target_root_name)
>         res.extract_results()
>         res.aggregate_input_data()
",autoclasswrapper/ipflakies_result/4a848dd6/patch/test_output_patch_0f600afc.patch
autodiscover,https://github.com/nicolaszein/autodiscover,3009f81c51b7a4cb077427e429d740db98eb173b,tests/test_autodiscover.py::TestAutoDiscover::test_autodiscover_with_pattern,brittle,tests/test_autodiscover.py::TestAutoDiscover::test_autodiscover,,"23a24,27
>         autodiscover = AutoDiscover(path=path)
>         module = 'tests.module_to_import'
>         autodiscover()
>         path = pathlib.Path(PATH)
",autodiscover/ipflakies_result/20a8783c/patch/test_autodiscover_patch_b4e13c82.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_create_document,victim,examples/test_pytest.py::test_index,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"89a90,93
>         ' Should create markdown document. '
>         res = self.client.get('/')
>         autodoc.parse('GET /', res)
>         autodoc.template_path = os.path.join(self.root_path, 'templates/markdown.md')
",py-autodoc/ipflakies_result/c4d340dc/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_gen_each_case.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_gen_each_case.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_gen_each_case.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_gen_each_case.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_gen_each_case.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_gen_each_case.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_gen_each_case.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_gen_each_case.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_gen_each_case.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_pytest.py::test_index,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_pytest.py::test_index,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_pytest.py::test_post,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_pytest.py::test_post,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_requests.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_requests.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_requests.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_requests.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_requests.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_requests.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_requests.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_requests.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_requests.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_unittest.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_unittest.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_unittest.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_unittest.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_unittest.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_unittest.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_unittest.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_unittest.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,examples/test_unittest.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,tests/test_not_generate.py::TestAutodocNotGenerate::test_should_not_generate,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,tests/test_not_generate.py::TestAutodocNotGenerate::test_should_not_generate,tests/test_autodoc.py::TestAutodoc::test_create_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_response,victim,tests/test_not_generate.py::TestAutodocNotGenerate::test_should_not_generate,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"42a43
>         autodoc.clear()
",py-autodoc/ipflakies_result/8fdce11a/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_gen_each_case.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_gen_each_case.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_gen_each_case.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_gen_each_case.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_gen_each_case.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_gen_each_case.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_gen_each_case.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_gen_each_case.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_gen_each_case.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_pytest.py::test_index,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_pytest.py::test_index,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_pytest.py::test_post,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_pytest.py::test_post,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_requests.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_requests.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_requests.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_requests.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_requests.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_requests.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_requests.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_requests.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_requests.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_unittest.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_unittest.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_unittest.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_unittest.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_unittest.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_unittest.py::TestUnittest::test_get,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_unittest.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_unittest.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,examples/test_unittest.py::TestUnittest::test_post,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,tests/test_not_generate.py::TestAutodocNotGenerate::test_should_not_generate,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_fce4d8dc.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,tests/test_not_generate.py::TestAutodocNotGenerate::test_should_not_generate,tests/test_autodoc.py::TestAutodoc::test_create_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_ac7fa065.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_parse_responses,victim,tests/test_not_generate.py::TestAutodocNotGenerate::test_should_not_generate,tests/test_autodoc.py::TestAutodoc::test_create_markdown_document,"62a63
>         autodoc.clear()
",py-autodoc/ipflakies_result/66ce5772/patch/test_autodoc_patch_031b4820.patch
py-autodoc,https://github.com/heavenshell/py-autodoc,001d5ff03d41a5d714075eb08e666c413d50f0ac,tests/test_autodoc.py::TestAutodoc::test_should_change_separators,victim,examples/test_gen_each_case.py::TestUnittest::test_foo_bar,tests/test_autodoc.py::TestAutodoc::test_clear_responses,"111a112
>         autodoc.clear()
",py-autodoc/ipflakies_result/649b2ea6/patch/test_autodoc_patch_fce4d8dc.patch
autoyaml,https://github.com/martyni/autoyaml,be3f450667bcca477683e63bcc49c67c5d170855,tests/autoyaml_test.py::TestAutoyamlMethods::test_b_decrypt_config,brittle,tests/autoyaml_test.py::TestAutoyamlMethods::test_a_encrypt_config,,"47a48
>         write_config(self.enc_config, self.enc_app, encrypted=True, password_function=self.password_function)
",autoyaml/ipflakies_result/7f5cbccb/patch/autoyaml_test_patch_13ab0dbb.patch
autoyaml,https://github.com/martyni/autoyaml,be3f450667bcca477683e63bcc49c67c5d170855,tests/autoyaml_test.py::TestEncryptorMethods::test_b_decrypt,brittle,tests/autoyaml_test.py::TestEncryptorMethods::test_a_encrypt,,"79a80,82
>         with open(self.file_name, 'w') as test_file:
>             test_file.write(self.contents)
>         encrypt_file(self.file_name, self.password, self.salt)
",autoyaml/ipflakies_result/3a8e9414/patch/autoyaml_test_patch_a25f83a9.patch
basic_auth,https://github.com/rorymurdock/basic_auth,622f2133c13988cec549f4ea55bed14e50f90876,tests/test_basic.py::test_verify_config,brittle,tests/test_basic.py::test_write_config,,"111a112,115
>     'Test writing config to files'
>     data = {}
>     data[KEY] = VALUE
>     assert (AUTH.write_config(data, 'test.json') is True)
",basic_auth/ipflakies_result/b8ff323b/patch/test_basic_patch_5db98ba3.patch
bottle-neck,https://github.com/agile4you/bottle-neck.git,ebc670a4b178255473d68e9b4122ba04e38f4810,test/test_routing.py::test_router_mount_pass,brittle,test/test_routing.py::test_router_register_handler_cbv_pass,,"67a68
>     mock_router.register_handler(mock_handler, entrypoint='/api')
",bottle-neck/ipflakies_result/d09aa225/patch/test_routing_patch_0f506518.patch
bottle-neck,https://github.com/agile4you/bottle-neck.git,ebc670a4b178255473d68e9b4122ba04e38f4810,test/test_routing.py::test_router_register_handler_fn_pass,victim,test/test_routing.py::test_router_register_handler_cbv_pass,test/test_handlers.py::test_handler_route_method_function_pass,"36a37,40
> 
>     class TestCls(object):
> 
>         @handler.route_method('POST', extra_part=True)
",bottle-neck/ipflakies_result/50625878/patch/test_routing_patch_99ab5eaa.patch
bottle-neck,https://github.com/agile4you/bottle-neck.git,ebc670a4b178255473d68e9b4122ba04e38f4810,test/test_routing.py::test_router_register_handler_fn_pass,victim,test/test_routing.py::test_router_register_handler_cbv_pass,test/test_handlers.py::test_handler_route_method_function_fail,"36a37,42
>     with pytest.raises(handler.HandlerHTTPMethodError):
> 
>         class TestCls(object):
> 
>             @handler.route_method('PORT', extra_part=True)
>             def fn(self):
",bottle-neck/ipflakies_result/50625878/patch/test_routing_patch_a5fa7c76.patch
bottle-neck,https://github.com/agile4you/bottle-neck.git,ebc670a4b178255473d68e9b4122ba04e38f4810,test/test_routing.py::test_router_register_handler_fn_pass,victim,test/test_routing.py::test_router_register_handler_cbv_pass,test/test_handlers.py::test_handler_plugin_method_function_pass,"36a37,40
> 
>     class TestCls(object):
> 
>         @handler.plugin_method('log', 'auth')
",bottle-neck/ipflakies_result/50625878/patch/test_routing_patch_373de1a2.patch
bottle-neck,https://github.com/agile4you/bottle-neck.git,ebc670a4b178255473d68e9b4122ba04e38f4810,test/test_routing.py::test_router_register_handler_fn_pass,victim,test/test_routing.py::test_router_register_handler_cbv_pass,test/test_handlers.py::test_handler_singleton,"36a37
>     'Test `bottle_neck.handlers.BaseHandler` subclass for singleton pattern.\n    '
",bottle-neck/ipflakies_result/50625878/patch/test_routing_patch_ae1052d9.patch
carbonize,https://github.com/eillarra/carbonize,efc89b8a9e44f9d64110406ce70929a9671517c7,tests/test_api.py::TestFootprint::test_flight_two_way,brittle,tests/test_api.py::TestFootprint::test_flight,,"19a20
>         self.fp.add_flight(a='BRU', b='BCN')
",carbonize/ipflakies_result/9581824a/patch/test_api_patch_aeca4176.patch
centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python,9f207d5458afc3304e24f16988069467b19eab81,tests/test_command.py::TestCommands::test_command_list,brittle,tests/test_command.py::TestConnect::test_connection,,"61a62,63
>         wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
>         responses.add(responses.POST, 'http://api.domain.tld/centreon/api/index.php?action=authenticate', body=wsresponses, status=200, content_type='application/json')
",centreon-sdk-python/ipflakies_result/a3d833fa/patch/test_command_patch_16d25aa8.patch
centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python,9f207d5458afc3304e24f16988069467b19eab81,tests/test_command.py::TestCommands::test_command_not_exist,brittle,tests/test_command.py::TestConnect::test_connection,,"72a73,74
>         wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
>         responses.add(responses.POST, 'http://api.domain.tld/centreon/api/index.php?action=authenticate', body=wsresponses, status=200, content_type='application/json')
",centreon-sdk-python/ipflakies_result/cc11ef4a/patch/test_command_patch_16d25aa8.patch
centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python,9f207d5458afc3304e24f16988069467b19eab81,tests/test_command.py::TestCommands::test_command_setparam,brittle,tests/test_command.py::TestConnect::test_connection,,"111a112,119
>         url = 'http://api.domain.tld/centreon'
>         username = 'mytest'
>         password = 'mypass'
>         mytoken = 'NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc='
>         wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
>         responses.add(responses.POST, 'http://api.domain.tld/centreon/api/index.php?action=authenticate', body=wsresponses, status=200, content_type='application/json')
>         myconn = Webservice.getInstance(url, username, password)
>         myconn.auth()
",centreon-sdk-python/ipflakies_result/32227c0f/patch/test_command_patch_16d25aa8.patch
centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python,9f207d5458afc3304e24f16988069467b19eab81,tests/test_hosts.py::TestHosts::test_hosts_list,brittle,tests/test_command.py::TestConnect::test_connection,,"65a66,67
>         wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
>         responses.add(responses.POST, 'http://api.domain.tld/centreon/api/index.php?action=authenticate', body=wsresponses, status=200, content_type='application/json')
",centreon-sdk-python/ipflakies_result/845a1b21/patch/test_hosts_patch_16d25aa8.patch
centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python,9f207d5458afc3304e24f16988069467b19eab81,tests/test_hosts.py::TestHosts::test_hosts_not_exist,brittle,tests/test_command.py::TestConnect::test_connection,,"76a77,78
>         wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
>         responses.add(responses.POST, 'http://api.domain.tld/centreon/api/index.php?action=authenticate', body=wsresponses, status=200, content_type='application/json')
",centreon-sdk-python/ipflakies_result/d302bf4f/patch/test_hosts_patch_16d25aa8.patch
centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python,9f207d5458afc3304e24f16988069467b19eab81,tests/test_resourcecfg.py::TestResourceCFG::test_resourcecfg_building_line,brittle,tests/test_command.py::TestConnect::test_connection,,"74a75,76
>         wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
>         responses.add(responses.POST, 'http://api.domain.tld/centreon/api/index.php?action=authenticate', body=wsresponses, status=200, content_type='application/json')
",centreon-sdk-python/ipflakies_result/bcf45ff4/patch/test_resourcecfg_patch_16d25aa8.patch
centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python,9f207d5458afc3304e24f16988069467b19eab81,tests/test_resourcecfg.py::TestResourceCFG::test_resourcecfg_get_one,brittle,tests/test_command.py::TestConnect::test_connection,,"63a64,65
>         wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
>         responses.add(responses.POST, 'http://api.domain.tld/centreon/api/index.php?action=authenticate', body=wsresponses, status=200, content_type='application/json')
",centreon-sdk-python/ipflakies_result/6c8f30ae/patch/test_resourcecfg_patch_16d25aa8.patch
centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python,9f207d5458afc3304e24f16988069467b19eab81,tests/test_resourcecfg.py::TestResourceCFG::test_resourcecfg_not_exist,brittle,tests/test_command.py::TestConnect::test_connection,,"85a86,87
>         wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
>         responses.add(responses.POST, 'http://api.domain.tld/centreon/api/index.php?action=authenticate', body=wsresponses, status=200, content_type='application/json')
",centreon-sdk-python/ipflakies_result/86da55d0/patch/test_resourcecfg_patch_16d25aa8.patch
centreon-sdk-python,https://github.com/guillaumewatteeux/centreon-sdk-python,9f207d5458afc3304e24f16988069467b19eab81,tests/test_resourcecfg.py::TestResourceCFG::test_resourcecfg_setparam,brittle,tests/test_command.py::TestConnect::test_connection,,"134a135,142
>         url = 'http://api.domain.tld/centreon'
>         username = 'mytest'
>         password = 'mypass'
>         mytoken = 'NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc='
>         wsresponses = '{""authToken"": ""NTc1MDU3MGE3M2JiODIuMjA4OTA2OTc=""}'
>         responses.add(responses.POST, 'http://api.domain.tld/centreon/api/index.php?action=authenticate', body=wsresponses, status=200, content_type='application/json')
>         myconn = Webservice.getInstance(url, username, password)
>         myconn.auth()
",centreon-sdk-python/ipflakies_result/69567d28/patch/test_resourcecfg_patch_16d25aa8.patch
cloudnetpy,https://github.com/tukiains/cloudnetpy,26f2607b890630146469cfa410fce99438ceee3f,tests/unit/test_classify.py::TestFindRain::test_3,brittle,tests/unit/test_classify.py::TestFindRain::test_2,,"50a51
>         self.z[:, 3] = 0.1
",cloudnetpy/ipflakies_result/c9e31a6e/patch/test_classify_patch_35398da2.patch
cloudnetpy,https://github.com/tukiains/cloudnetpy,26f2607b890630146469cfa410fce99438ceee3f,tests/unit/test_lwc.py::test_update_status[0],victim,tests/unit/test_lwc.py::test_screen_rain_status[0],tests/unit/test_lwc.py::test_adjust_lwc[0],"135a136
>     assert (value in STATUS_OBJ.status)
",cloudnetpy/ipflakies_result/90ba5ddf/patch/test_lwc_patch_d226e824.patch
cloudnetpy,https://github.com/tukiains/cloudnetpy,26f2607b890630146469cfa410fce99438ceee3f,tests/unit/test_lwc.py::test_update_status[1],victim,tests/unit/test_lwc.py::test_adjust_lwc[0],tests/unit/test_lwc.py::test_screen_rain_status[0],"135a136
>     assert (value in STATUS_OBJ.status)
",cloudnetpy/ipflakies_result/d50df86f/patch/test_lwc_patch_010bcd66.patch
clu,https://github.com/nir0s/clu,77da967a4577ca4cf100cfe34e87b39ad88bf21c,tests/test_ghost.py::TestCLI::test_init_already_initialized,brittle,tests/test_ghost.py::TestGeneral::test_get_passphrase,,"1406a1407,1416
> 
>         def _make_temp_passphrase_file():
>             (fd, temp_file_path) = tempfile.mkstemp()
>             os.close(fd)
>             os.remove(temp_file_path)
>             return temp_file_path
>         tempfile1 = _make_temp_passphrase_file()
>         tempfile2 = _make_temp_passphrase_file()
>         passphrase = '123'
>         assert isinstance(ghost.POTENTIAL_PASSPHRASE_LOCATIONS, list)
",clu/ipflakies_result/be5da995/patch/test_ghost_patch_6c0f3407.patch
coinbase-commerce-python,https://github.com/coinbase/coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_authentication_error,victim,tests/test_api_client.py::TestApiClient::test_param_required_error,tests/test_api_client.py::TestApiClient::test_internal_server_error,"98a99
>         mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
",coinbase-commerce-python/ipflakies_result/37d15f20/patch/test_api_client_patch_ce2fd956.patch
coinbase-commerce-python,https://github.com/coinbase/coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_invalid_request_error,victim,tests/test_api_client.py::TestApiClient::test_param_required_error,tests/test_api_client.py::TestApiClient::test_internal_server_error,"90a91
>         mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
",coinbase-commerce-python/ipflakies_result/16653e4e/patch/test_api_client_patch_ce2fd956.patch
coinbase-commerce-python,https://github.com/coinbase/coinbase-commerce-python,d306fc562309edb909c8ace501c63327a7635975,tests/test_api_client.py::TestApiClient::test_resource_not_found_error,victim,tests/test_api_client.py::TestApiClient::test_param_required_error,tests/test_api_client.py::TestApiClient::test_internal_server_error,"106a107
>         mock.MagicMock.content = PropertyMock(return_value='{""error"": {}}')
",coinbase-commerce-python/ipflakies_result/2878f1a8/patch/test_api_client_patch_ce2fd956.patch
compare-mt,https://github.com/neulab/compare-mt,92502b30b1f228773179a01dd86fe1b8dfd400e5,tests/test_cache.py::TestSentBucketCache::test_sentbucket_cache,brittle,tests/test_cache.py::TestScoreCache::test_score_cache,,"103a104
>         reporters.sys_names = [f'sys{(i + 1)}' for i in range(2)]
",compare-mt/ipflakies_result/46137f7e/patch/test_cache_patch_1cf60e2c.patch
compare-mt,https://github.com/neulab/compare-mt,92502b30b1f228773179a01dd86fe1b8dfd400e5,tests/test_cache.py::TestSrcWordAccCache::test_src_wordacc_cache,brittle,tests/test_cache.py::TestScoreCache::test_score_cache,,"87a88
>         reporters.sys_names = [f'sys{(i + 1)}' for i in range(2)]
",compare-mt/ipflakies_result/6902f745/patch/test_cache_patch_1cf60e2c.patch
compare-mt,https://github.com/neulab/compare-mt,92502b30b1f228773179a01dd86fe1b8dfd400e5,tests/test_cache.py::TestWordAccCache::test_wordacc_cache,brittle,tests/test_cache.py::TestScoreCache::test_score_cache,,"67a68
>         reporters.sys_names = [f'sys{(i + 1)}' for i in range(2)]
",compare-mt/ipflakies_result/c4d88b3d/patch/test_cache_patch_1cf60e2c.patch
compilertools,https://github.com/JGoutin/compilertools,7b898cb6970f5f25c5356b15a2efd0cb2e54d566,tests/test_build.py::tests_patch___new__,brittle,tests/test_build.py::tests_get_build_compile_args,,"516a517
>     from compilertools.build import get_build_compile_args
",compilertools/ipflakies_result/9aa164e0/patch/test_build_patch_042f46ba.patch
configparse,https://github.com/jyn514/configparse,d7a4ee5b121de2be1858104723bdb7ac47df64ce,test/test_all.py::test_positional,victim,test/test_all.py::test_default_ext,test/test_all.py::test_infer_ext,"87a88
>     write_home(None, json.dumps({'durians': 'exactly 6'}))
",configparse/ipflakies_result/a3999db8/patch/test_all_patch_4d65a4cc.patch
configparse,https://github.com/jyn514/configparse,d7a4ee5b121de2be1858104723bdb7ac47df64ce,test/test_all.py::test_positional,victim,test/test_all.py::test_default_ext,test/test_all.py::test_unknown_config,"87a88
>     write_home(None, json.dumps({'grapefruit': 'big and juicy'}))
",configparse/ipflakies_result/a3999db8/patch/test_all_patch_f3e9a0b7.patch
configparse,https://github.com/jyn514/configparse,d7a4ee5b121de2be1858104723bdb7ac47df64ce,test/test_all.py::test_positional,victim,test/test_all.py::test_default_ext,test/test_all.py::test_import_error,"87a88
>     write_home(None, json.dumps({'iceberg': '5'}))
",configparse/ipflakies_result/a3999db8/patch/test_all_patch_e9d9224f.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,victim,tests/test_model.py::TestFactorySerialization::test_collapse_json,tests/test_model.py::TestAutoIdentifiers::test_int,"337a338
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/d27384e2/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,victim,tests/test_model.py::TestFactorySerialization::test_collapse_json,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"337a338
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/d27384e2/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,victim,tests/test_model.py::TestFactorySerialization::test_collapse_json,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"337a338
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/d27384e2/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"337a338
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/d27384e2/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"337a338
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/d27384e2/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"337a338
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/d27384e2/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,victim,tests/test_model.py::TestAutoIdentifiers::test_uuid,tests/test_model.py::TestAutoIdentifiers::test_int,"337a338
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/d27384e2/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,victim,tests/test_model.py::TestAutoIdentifiers::test_uuid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"337a338
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/d27384e2/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestAutoIdentifiers::test_no_ident,victim,tests/test_model.py::TestAutoIdentifiers::test_uuid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"337a338
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/d27384e2/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_allows_multiple,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"393a394
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/1e7ff116/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_allows_multiple,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"393a394
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/1e7ff116/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_allows_multiple,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"393a394
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/1e7ff116/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_allows_multiple,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"393a394
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/1e7ff116/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_allows_multiple,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"393a394
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/1e7ff116/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_init_params,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"421a422
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/21e5af35/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_init_params,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"421a422
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/21e5af35/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_init_params,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"421a422
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/21e5af35/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_init_params,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"421a422
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/21e5af35/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_init_params,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"421a422
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/21e5af35/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_list_my_props,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"385a386
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/a1b96098/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_list_my_props,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"385a386
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/a1b96098/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_list_my_props,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"385a386
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/a1b96098/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_list_my_props,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"385a386
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/a1b96098/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_list_my_props,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"385a386
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/a1b96098/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"409a410
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/0b742694/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"409a410
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/0b742694/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"409a410
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/0b742694/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"409a410
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/0b742694/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestBaseResource::test_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"409a410
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/0b742694/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_breadth,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"135a136
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/b5322935/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_breadth,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"135a136
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/b5322935/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_breadth,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"135a136
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/b5322935/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_breadth,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"135a136
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/b5322935/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_breadth,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"135a136
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/b5322935/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_collapse_json,victim,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,"190a191
>         model.factory.auto_assign_id = True
",crom/ipflakies_result/002fd6ca/patch/test_model_patch_95cd2225.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_collapse_json,victim,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_int,"190a191
>         model.factory.auto_assign_id = True
",crom/ipflakies_result/002fd6ca/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_collapse_json,victim,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"190a191
>         model.factory.auto_assign_id = True
",crom/ipflakies_result/002fd6ca/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_collapse_json,victim,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"190a191
>         model.factory.auto_assign_id = True
",crom/ipflakies_result/002fd6ca/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_collapse_json,victim,tests/test_model.py::TestAutoIdentifiers::test_no_ident,tests/test_model.py::TestAutoIdentifiers::test_uuid,"190a191
>         model.factory.auto_assign_id = True
",crom/ipflakies_result/002fd6ca/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_ordering,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"219a220
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/9ada7606/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_ordering,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"219a220
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/9ada7606/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_ordering,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"219a220
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/9ada7606/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_ordering,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"219a220
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/9ada7606/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_ordering,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"219a220
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/9ada7606/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_pipe_scoped,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"178a179
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/3cdab9ac/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_pipe_scoped,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"178a179
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/3cdab9ac/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_pipe_scoped,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"178a179
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/3cdab9ac/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_pipe_scoped,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"178a179
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/3cdab9ac/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_pipe_scoped,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"178a179
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/3cdab9ac/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_production_mode,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"205a206
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/f9e6895e/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_production_mode,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"205a206
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/f9e6895e/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_production_mode,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"205a206
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/f9e6895e/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_production_mode,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"205a206
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/f9e6895e/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_production_mode,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"205a206
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/f9e6895e/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_recursion,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"171a172
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/3dea2497/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_recursion,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"171a172
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/3dea2497/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_recursion,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"171a172
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/3dea2497/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_recursion,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"171a172
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/3dea2497/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_recursion,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"171a172
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/3dea2497/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_string_list,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"155a156
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/af033bf9/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_string_list,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"155a156
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/af033bf9/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_string_list,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"155a156
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/af033bf9/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_string_list,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"155a156
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/af033bf9/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_string_list,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"155a156
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/af033bf9/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_toJSON,victim,tests/test_multiple_instantiation.py::TestMIClasses::test_destruction,tests/test_model.py::TestFactorySerialization::test_collapse_json,"77a78
>         model.factory.context_uri = 'https://linked.art/ns/v1/linked-art.json'
",crom/ipflakies_result/494fd972/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_toJSON_fast,victim,tests/test_multiple_instantiation.py::TestMIClasses::test_destruction,tests/test_model.py::TestFactorySerialization::test_collapse_json,"85a86
>         model.factory.context_uri = 'https://linked.art/ns/v1/linked-art.json'
",crom/ipflakies_result/0e50c747/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_toString,victim,tests/test_multiple_instantiation.py::TestMIClasses::test_destruction,tests/test_model.py::TestFactorySerialization::test_collapse_json,"107a108
>         model.factory.context_uri = 'https://linked.art/ns/v1/linked-art.json'
",crom/ipflakies_result/210b628e/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestFactorySerialization::test_toString_fast,victim,tests/test_multiple_instantiation.py::TestMIClasses::test_destruction,tests/test_model.py::TestFactorySerialization::test_collapse_json,"113a114
>         model.factory.context_uri = 'https://linked.art/ns/v1/linked-art.json'
",crom/ipflakies_result/c391f63f/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_not_multiple_instance,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"528a529
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/ec8e2d7b/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_not_multiple_instance,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"528a529
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/ec8e2d7b/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_not_multiple_instance,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"528a529
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/ec8e2d7b/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_not_multiple_instance,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"528a529
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/ec8e2d7b/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_not_multiple_instance,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"528a529
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/ec8e2d7b/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"517a518
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/611f0ecf/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"517a518
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/611f0ecf/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"517a518
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/611f0ecf/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"517a518
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/611f0ecf/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_multiplicity,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"517a518
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/611f0ecf/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_profile_off,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"491a492
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/e97b3f2c/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_profile_off,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"491a492
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/e97b3f2c/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_profile_off,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"491a492
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/e97b3f2c/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_profile_off,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"491a492
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/e97b3f2c/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestMagicMethods::test_validate_profile_off,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"491a492
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/e97b3f2c/patch/test_model_patch_83f8c3fb.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestPropertyCache::test_cache_hierarchy,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestFactorySerialization::test_collapse_json,"444a445
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/81cfffea/patch/test_model_patch_4dd0b2ee.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestPropertyCache::test_cache_hierarchy,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int,"444a445
>         model.factory.auto_id_type = 'int'
",crom/ipflakies_result/81cfffea/patch/test_model_patch_acfa93ad.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestPropertyCache::test_cache_hierarchy,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_segment,"444a445
>         model.factory.auto_id_type = 'int-per-segment'
",crom/ipflakies_result/81cfffea/patch/test_model_patch_2bf9252e.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestPropertyCache::test_cache_hierarchy,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_int_per_type,"444a445
>         model.factory.auto_id_type = 'int-per-type'
",crom/ipflakies_result/81cfffea/patch/test_model_patch_c587a7c4.patch
crom,https://github.com/thegetty/crom,98bb6be4e32b4c81eb7e0b5e841a915b015abaf0,tests/test_model.py::TestPropertyCache::test_cache_hierarchy,victim,tests/test_model.py::TestAutoIdentifiers::test_bad_autoid,tests/test_model.py::TestAutoIdentifiers::test_uuid,"444a445
>         model.factory.auto_id_type = 'uuid'
",crom/ipflakies_result/81cfffea/patch/test_model_patch_83f8c3fb.patch
dcard-spider,https://github.com/leVirve/dcard-spider,ac64cbcfe7ef6be7e554cef422b1a8a6bb968d46,tests/test_forums.py::TestForums::test_with_none_name_in_dcard_instance,victim,tests/test_forums.py::TestForums::test_with_name_param_through__call__,tests/test_api.py::test_valid_api_forums,"6a7
>         url = route.forums()
",dcard-spider/ipflakies_result/4b295e60/patch/test_forums_patch_45dacb08.patch
dcard-spider,https://github.com/leVirve/dcard-spider,ac64cbcfe7ef6be7e554cef422b1a8a6bb968d46,tests/test_forums.py::TestForums::test_with_none_name_in_dcard_instance,victim,tests/test_forums.py::TestForums::test_with_name_param_through__call__,tests/test_api.py::test_valid_api_forum,"6a7
>         url = route.posts_meta(forum='funny')
",dcard-spider/ipflakies_result/4b295e60/patch/test_forums_patch_518fdb27.patch
dcard-spider,https://github.com/leVirve/dcard-spider,ac64cbcfe7ef6be7e554cef422b1a8a6bb968d46,tests/test_forums.py::TestForums::test_with_none_name_in_dcard_instance,victim,tests/test_forums.py::TestForums::test_with_name_param_through__call__,tests/test_cli.py::TestCli::test_verbose_log,"6a7
>         argv = 'TEST -v'.split()
",dcard-spider/ipflakies_result/4b295e60/patch/test_forums_patch_681f7030.patch
dcard-spider,https://github.com/leVirve/dcard-spider,ac64cbcfe7ef6be7e554cef422b1a8a6bb968d46,tests/test_posts.py::TestPosts::test_with_none_in_dcard_instance,victim,tests/test_posts.py::TestPosts::test_get_post_bundle,tests/test_forums.py::TestForums::test_with_none_name_in_dcard_instance,"10a11
>         f = dcard.forums
",dcard-spider/ipflakies_result/61d11806/patch/test_posts_patch_38aab832.patch
devtracker,https://github.com/ConSou/devtracker,ea892d6d48aa5d4627b429469b59ae3f0ce7f10f,devtracker/test_devtracker.py::test_current_status,brittle,devtracker/test_devtracker.py::test_full_report,,"96a97,108
>     next_line = ['1999-01-01', '00:00:00', '1999-01-01', '00:00:00', '00:00:00']
>     following_line = ['1999-01-02', '00:00:01', '1999-01-02', '00:00:02', '00:00:01']
>     with open(path, 'r', newline='') as myFile:
>         reader = list(csv.reader(myFile))
>         reader.pop()
>         reader.pop()
>         with open(path, 'w', newline='') as myfile:
>             wr = csv.writer(myfile, delimiter=',', quotechar='""', quoting=csv.QUOTE_ALL)
>             for i in reader:
>                 wr.writerow(i)
>             wr.writerow(next_line)
>             wr.writerow(following_line)
",devtracker/ipflakies_result/e74337d2/patch/test_devtracker_patch_d319336d.patch
easy_python_requirements,https://github.com/tjdevries/easy_python_requirements,2bf905f34065637cbc781d17d8e5806892fb66d5,test/test_mock_functions.py::test_mock_class_update,brittle,test/test_mock_functions.py::test_mock_module_with_two_updates,,"170a171,183
>         files_to_check = ['mock_functions/test_module_stuff.py']
>         for f in files_to_check:
>             update_file(f)
>         for f in files_to_check:
>             index = 0
>             with open(f, 'r') as reader:
>                 for line in reader.readlines():
>                     if (index == 27):
>                         print(line)
>                         json_info = read_json_info(line)
>                         assert (json_info['test_id'] == 6)
>                     index += 1
>     with FileCleaner('./mock_functions/test_module_stuff.py'):
",easy_python_requirements/ipflakies_result/5adc364e/patch/test_mock_functions_patch_3169bcfa.patch
ecs-crd-cli,https://github.com/AdventielFr/ecs-crd-cli.git,7b296c64086a204d3540da272e3d8dd74721c6c4,tests/test_prepareDeploymentServiceDefinitionStep.py::test_process_application_autoscaling_scalable_target_max_capacity_invalid,brittle,tests/test_prepareDeploymentServiceDefinitionStep.py::test_process_application_autoscaling_scalable_target_min_capacity_valid,,"319a320
>     step.infos.scale_infos = ScaleInfos()
",ecs-crd-cli/ipflakies_result/ad0eb6a8/patch/test_prepareDeploymentServiceDefinitionStep_patch_104644c2.patch
envyaml,https://github.com/thesimj/envyaml,79a220cabb69d71397310d941de205610cf5e4cb,tests/test_envyaml.py::test_it_should_not_fail_when_try_load_non_exist_default_file,brittle,tests/test_envyaml.py::test_it_should_read_config_from_env_variable,,"184a185,186
>     os.environ['ENV_YAML_FILE'] = 'tests/env.test.yaml'
>     os.environ['ENV_FILE'] = 'tests/test.env'
",envyaml/ipflakies_result/942b1c79/patch/test_envyaml_patch_9ba6dc02.patch
eppy,https://github.com/santoshphilip/eppy,98e58583dce6c0fcec9c7b1ff1142bae0a67ddc7,eppy/tests/test_modeleditor.py::test_idd_index,brittle,eppy/tests/test_IDF.py::TestIDF::test_removeidfobject,,"603a604,607
>     idftxt = ''
>     idfhandle = StringIO(idftxt)
>     idf = IDF(idfhandle)
>     key = 'BUILDING'
",eppy/ipflakies_result/00aaf9d4/patch/test_modeleditor_patch_a6016d42.patch
epsagon-python,https://github.com/epsagon/epsagon-python,b985d8412848f9a0c98e2f15ae0967a6dba3517f,tests/wrappers/test_python_function.py::test_python_wrapper_python_runner_factory_failed,victim,tests/test_epsagon_init.py::test_epsagon_disable_epsagon_and_disable_patch,tests/test_epsagon_init.py::test_epsagon_wrapper_env_init,"52a53
>     reload(epsagon)
",epsagon-python/ipflakies_result/ffd12aba/patch/test_python_function_patch_2a8507ab.patch
epsagon-python,https://github.com/epsagon/epsagon-python,b985d8412848f9a0c98e2f15ae0967a6dba3517f,tests/wrappers/test_python_function.py::test_python_wrapper_python_runner_factory_failed,victim,tests/test_epsagon_init.py::test_epsagon_disable_epsagon_and_disable_patch,tests/test_epsagon_init.py::test_epsagon_wrapper_env_endpoints,"52a53
>     reload(epsagon)
",epsagon-python/ipflakies_result/ffd12aba/patch/test_python_function_patch_0f49652b.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_ArbitraryNumberImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_dataframe_checks.py::test_is_dataframe,"144a145,146
>     with pytest.raises(TypeError):
>         assert _is_dataframe([1, 2, 4])
",feature_engine/ipflakies_result/58b7766c/patch/test_missing_data_imputer_patch_4aca7501.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_ArbitraryNumberImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_discretisers.py::test_UserInputDiscretise,"144a145
>     boston_dataset = load_boston()
",feature_engine/ipflakies_result/58b7766c/patch/test_missing_data_imputer_patch_837290cf.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_ArbitraryNumberImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_error_when_selected__variable_not_numeric,"144a145
>     transformer = MathematicalCombinator(variables=['Name', 'Age', 'Marks'])
",feature_engine/ipflakies_result/58b7766c/patch/test_missing_data_imputer_patch_cc230da6.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_ArbitraryNumberImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_Serror_when_selected__variable_not_in_df,"144a145
>     transformer = MathematicalCombinator(variables=['FeatOutsideDataset', 'Age'])
",feature_engine/ipflakies_result/58b7766c/patch/test_missing_data_imputer_patch_f3e4ab31.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_ArbitraryNumberImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_error_when_variable_names_and_operations_LengthNotEqual,"144a145,146
>     with pytest.raises(KeyError):
>         transformer = MathematicalCombinator(math_operations=['sum', 'mean'], new_variables_names=['sum_of_two_vars'])
",feature_engine/ipflakies_result/58b7766c/patch/test_missing_data_imputer_patch_9b42c0b2.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_ArbitraryNumberImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_missing_data_imputer.py::test_RandomSampleImputer,"144a145
>     ref = {'Name': ['tom', 'nick', 'krish', 'peter', 'peter', 'sam', 'fred', 'sam'], 'City': ['London', 'Manchester', 'London', 'Manchester', 'London', 'London', 'Bristol', 'Manchester'], 'Studies': ['Bachelor', 'Bachelor', 'PhD', 'Masters', 'Bachelor', 'PhD', 'None', 'Masters'], 'Age': [20, 21, 19, 23, 23, 40, 41, 37], 'Marks': [0.9, 0.8, 0.7, 0.3, 0.3, 0.6, 0.8, 0.6], 'dob': pd.date_range('2020-02-24', periods=8, freq='T')}
",feature_engine/ipflakies_result/58b7766c/patch/test_missing_data_imputer_patch_1f914fdb.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,victim,tests/test_missing_data_imputer.py::test_RandomSampleImputer,tests/test_dataframe_checks.py::test_is_dataframe,"207a208,209
>     with pytest.raises(TypeError):
>         assert _is_dataframe([1, 2, 4])
",feature_engine/ipflakies_result/f348c9db/patch/test_missing_data_imputer_patch_4aca7501.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,victim,tests/test_missing_data_imputer.py::test_RandomSampleImputer,tests/test_discretisers.py::test_UserInputDiscretise,"207a208
>     boston_dataset = load_boston()
",feature_engine/ipflakies_result/f348c9db/patch/test_missing_data_imputer_patch_837290cf.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,victim,tests/test_missing_data_imputer.py::test_RandomSampleImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_error_when_selected__variable_not_numeric,"207a208
>     transformer = MathematicalCombinator(variables=['Name', 'Age', 'Marks'])
",feature_engine/ipflakies_result/f348c9db/patch/test_missing_data_imputer_patch_cc230da6.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,victim,tests/test_missing_data_imputer.py::test_RandomSampleImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_Serror_when_selected__variable_not_in_df,"207a208
>     transformer = MathematicalCombinator(variables=['FeatOutsideDataset', 'Age'])
",feature_engine/ipflakies_result/f348c9db/patch/test_missing_data_imputer_patch_f3e4ab31.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,victim,tests/test_missing_data_imputer.py::test_RandomSampleImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_error_when_variable_names_and_operations_LengthNotEqual,"207a208,209
>     with pytest.raises(KeyError):
>         transformer = MathematicalCombinator(math_operations=['sum', 'mean'], new_variables_names=['sum_of_two_vars'])
",feature_engine/ipflakies_result/f348c9db/patch/test_missing_data_imputer_patch_9b42c0b2.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,victim,tests/test_missing_data_imputer.py::test_RandomSampleImputer,tests/test_variable_manipulation.py::test_define_variables,"207a208
>     vars_str = 'var1'
",feature_engine/ipflakies_result/f348c9db/patch/test_missing_data_imputer_patch_48416cbe.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_EndTailImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_dataframe_checks.py::test_is_dataframe,"80a81,82
>     with pytest.raises(TypeError):
>         assert _is_dataframe([1, 2, 4])
",feature_engine/ipflakies_result/dc018867/patch/test_missing_data_imputer_patch_4aca7501.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_EndTailImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_discretisers.py::test_UserInputDiscretise,"80a81
>     boston_dataset = load_boston()
",feature_engine/ipflakies_result/dc018867/patch/test_missing_data_imputer_patch_837290cf.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_EndTailImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_error_when_selected__variable_not_numeric,"80a81
>     transformer = MathematicalCombinator(variables=['Name', 'Age', 'Marks'])
",feature_engine/ipflakies_result/dc018867/patch/test_missing_data_imputer_patch_cc230da6.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_EndTailImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_Serror_when_selected__variable_not_in_df,"80a81
>     transformer = MathematicalCombinator(variables=['FeatOutsideDataset', 'Age'])
",feature_engine/ipflakies_result/dc018867/patch/test_missing_data_imputer_patch_f3e4ab31.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_EndTailImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_error_when_variable_names_and_operations_LengthNotEqual,"80a81,82
>     with pytest.raises(KeyError):
>         transformer = MathematicalCombinator(math_operations=['sum', 'mean'], new_variables_names=['sum_of_two_vars'])
",feature_engine/ipflakies_result/dc018867/patch/test_missing_data_imputer_patch_9b42c0b2.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_EndTailImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_variable_manipulation.py::test_define_variables,"80a81
>     vars_str = 'var1'
",feature_engine/ipflakies_result/dc018867/patch/test_missing_data_imputer_patch_48416cbe.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_MeanMedianImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_dataframe_checks.py::test_is_dataframe,"29a30,31
>     with pytest.raises(TypeError):
>         assert _is_dataframe([1, 2, 4])
",feature_engine/ipflakies_result/162186b6/patch/test_missing_data_imputer_patch_4aca7501.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_MeanMedianImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_discretisers.py::test_UserInputDiscretise,"29a30
>     boston_dataset = load_boston()
",feature_engine/ipflakies_result/162186b6/patch/test_missing_data_imputer_patch_837290cf.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_MeanMedianImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_error_when_selected__variable_not_numeric,"29a30
>     transformer = MathematicalCombinator(variables=['Name', 'Age', 'Marks'])
",feature_engine/ipflakies_result/162186b6/patch/test_missing_data_imputer_patch_cc230da6.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_MeanMedianImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_Serror_when_selected__variable_not_in_df,"29a30
>     transformer = MathematicalCombinator(variables=['FeatOutsideDataset', 'Age'])
",feature_engine/ipflakies_result/162186b6/patch/test_missing_data_imputer_patch_f3e4ab31.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_MeanMedianImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_mathematical_combination.py::test_MathematicalCombinator_error_when_variable_names_and_operations_LengthNotEqual,"29a30,31
>     with pytest.raises(KeyError):
>         transformer = MathematicalCombinator(math_operations=['sum', 'mean'], new_variables_names=['sum_of_two_vars'])
",feature_engine/ipflakies_result/162186b6/patch/test_missing_data_imputer_patch_9b42c0b2.patch
feature_engine,https://github.com/solegalli/feature_engine,ba4d7050b3923d620c1773b66cd4c51ed24498dd,tests/test_missing_data_imputer.py::test_MeanMedianImputer,victim,tests/test_missing_data_imputer.py::test_CategoricalVariableImputer,tests/test_variable_manipulation.py::test_define_variables,"29a30
>     vars_str = 'var1'
",feature_engine/ipflakies_result/162186b6/patch/test_missing_data_imputer_patch_48416cbe.patch
findatabroker,https://github.com/tomerten/findatabroker,204c433d51e2d2de5c132a4607cd504809fd4a71,FinDataBroker/tests/test_mongo.py::test__load___ok,brittle,FinDataBroker/tests/test_mongo.py::test__save___ok,,"37a38,42
>     objs = [{'name': 'boe', 'year': 2019}]
>     index = [('name', ASCENDING), ('year', ASCENDING)]
>     broker.save(objs, db, col, index, unique=True)
>     db = 'testdb'
>     col = 'testcol'
",findatabroker/ipflakies_result/dd73d33c/patch/test_mongo_patch_21587db3.patch
fissa,https://github.com/rochefort-lab/fissa,2077a8c8a029948dcf1d4c352f785700f42aff9f,fissa/tests/test_core.py::TestExperimentA::test_imagelistloaded_roizip,victim,fissa/tests/test_core.py::TestExperimentA::test_lowmemorymode,fissa/tests/test_core.py::TestExperimentA::test_manualhandler,"102a103,106
>         image_path = os.path.join(self.resources_dir, self.images_dir)
>         roi_path = os.path.join(self.resources_dir, self.roi_zip_path)
>         exp = core.Experiment(image_path, roi_path, self.output_dir, datahandler_custom=datahandler)
>         exp.separate()
",fissa/ipflakies_result/9b0aa9cb/patch/test_core_patch_407b3298.patch
fooof,https://github.com/voytekresearch/fooof,7a520c4f8ac3a44f4f18dc025b5e5d40049c9f2b,fooof/tests/objs/test_fit.py::test_fooof_fit_knee,victim,fooof/tests/plts/test_fg.py::test_plot_fg_ap,fooof/tests/objs/test_fit.py::test_fooof_checks,"87a88,94
>     'Test various checks, errors and edge cases in FOOOF.\n    This tests all the input checking done in `_prepare_data`.\n    '
>     (xs, ys) = gen_power_spectrum([3, 50], [50, 2], [10, 0.5, 2])
>     tfm = FOOOF(verbose=False)
>     with raises(DataError):
>         tfm.fit(xs, ys.astype('complex'))
>     tfm.fit(xs, ys, [3, 40])
>     (xs, ys) = gen_power_spectrum([3, 50], [50, 2], [10, 0.5, 2])
",fooof/ipflakies_result/f732b4e8/patch/test_fit_patch_ab2b1c7d.patch
fooof,https://github.com/voytekresearch/fooof,7a520c4f8ac3a44f4f18dc025b5e5d40049c9f2b,fooof/tests/objs/test_fit.py::test_fooof_fit_nk,victim,fooof/tests/plts/test_fg.py::test_plot_fg_gf,fooof/tests/objs/test_fit.py::test_fooof_fit_nk_noise,"53a54,59
>     'Test FOOOF fit on noisy data, to make sure nothing breaks.'
>     ap_params = [50, 2]
>     gauss_params = [10, 0.5, 2, 20, 0.3, 4]
>     nlv = 1.0
>     (xs, ys) = gen_power_spectrum([3, 50], ap_params, gauss_params, nlv)
>     tfm = FOOOF(max_n_peaks=8, verbose=False)
",fooof/ipflakies_result/4ffef357/patch/test_fit_patch_68c7fad8.patch
fooof,https://github.com/voytekresearch/fooof,7a520c4f8ac3a44f4f18dc025b5e5d40049c9f2b,fooof/tests/utils/test_download.py::test_check_data_file,brittle,fooof/tests/utils/test_download.py::test_check_data_folder,,"28a29
>     assert os.path.isdir(TEST_FOLDER)
",fooof/ipflakies_result/3c688ac7/patch/test_download_patch_6afd6fc7.patch
icloud_photos_downloader,https://github.com/ndbroadbent/icloud_photos_downloader,e5f304941e2a74b1fbda06c4270ec2fc100e6a49,tests/test_cli.py::CliTestCase::test_tqdm,brittle,tests/test_cli.py::CliTestCase::test_log_levels,,"59a60,64
>         with vcr.use_cassette('tests/vcr_cassettes/listing_photos.yml'):
>             os.environ['CLIENT_ID'] = 'DE309E26-942E-11E8-92F5-14109FE0B321'
>             runner = CliRunner()
>             result = runner.invoke(main, ['--username', 'jdoe@gmail.com', '--password', 'password1', '--recent', '0', '--log-level', 'info', '-dtests/fixtures/Photos'])
>             assert (result.exit_code == 0)
",icloud_photos_downloader/ipflakies_result/4c752d60/patch/test_cli_patch_b3de7604.patch
json-storage-manager,https://github.com/hefnawi/json-storage-manager,c7521fc4a576cf23a8c2454106bed6fb8c951b8d,tests/test_main.py::test_get_item,brittle,tests/test_main.py::test_write_json,,"77a78,82
>     with atomic.atomic_write(str(json_file)) as temp_file:
>         with open(str(json_file)) as products_file:
>             products_data = json.load(products_file)
>         products_data.append({'uuid': '2299d69e-deba-11e8-bded-680715cce955', 'price': 111.0, 'name': 'Test Product'})
>         json.dump(products_data, temp_file)
",json-storage-manager/ipflakies_result/6a35240d/patch/test_main_patch_7b89bf49.patch
json-storage-manager,https://github.com/hefnawi/json-storage-manager,c7521fc4a576cf23a8c2454106bed6fb8c951b8d,tests/test_main.py::test_set_item_fail,brittle,tests/test_main.py::test_set_item,,"114a115,116
>     new_item = {'uuid': '1144d69e-joya-33e8-bdfd-680688cce955', 'price': 333.0, 'name': 'Test Product via set_item'}
>     results = atomic.set_item(str(json_file), new_item)
",json-storage-manager/ipflakies_result/8014fb2e/patch/test_main_patch_1e2c90fa.patch
json-storage-manager,https://github.com/hefnawi/json-storage-manager,c7521fc4a576cf23a8c2454106bed6fb8c951b8d,tests/test_main.py::test_update_item,brittle,tests/test_main.py::test_set_item,,"102a103,104
>     new_item = {'uuid': '1144d69e-joya-33e8-bdfd-680688cce955', 'price': 333.0, 'name': 'Test Product via set_item'}
>     results = atomic.set_item(str(json_file), new_item)
",json-storage-manager/ipflakies_result/66fee762/patch/test_main_patch_1e2c90fa.patch
krllint,https://github.com/d4nuu8/krllint,2f9376cdae14c201364d9c31b4c19a8ff2f708d2,tests/test_extraneous_whitespace.py::ExtraneousWhiteSpaceTestCase::test_rule_with_fix,victim,tests/test_lower_or_mixed_case_keyword.py::LowerOrMixedCaseKeywordTestCase::test_rule_with_fix,tests/test_extraneous_whitespace.py::ExtraneousWhiteSpaceTestCase::test_rule_without_fix,"34a35,40
>         cli_args = _create_arg_parser().parse_args(['test_rule_without_fix'])
>         reload(config)
>         config.REPORTER = MemoryReporter
>         linter = Linter(cli_args, config)
>         (lines, reporter) = linter.lint_lines('test_rule_without_fix', self.TEST_INPUT)
>         self.assertEqual(reporter.found_issues[Category.CONVENTION], 1)
",krllint/ipflakies_result/68af961b/patch/test_extraneous_whitespace_patch_916f7d1b.patch
krllint,https://github.com/d4nuu8/krllint,2f9376cdae14c201364d9c31b4c19a8ff2f708d2,tests/test_extraneous_whitespace.py::ExtraneousWhiteSpaceTestCase::test_rule_without_fix,victim,tests/test_lower_or_mixed_case_keyword.py::LowerOrMixedCaseKeywordTestCase::test_rule_without_fix,tests/test_extraneous_whitespace.py::ExtraneousWhiteSpaceTestCase::test_rule_with_fix,"14a15,18
>         cli_args = _create_arg_parser().parse_args(['--fix', 'test_rule_with_fix'])
>         linter = Linter(cli_args, config)
>         (lines, _) = linter.lint_lines('test_rule_with_fix', self.TEST_INPUT)
>         self.assertEqual(lines, self.FIXED_INPUT)
",krllint/ipflakies_result/2c161a1e/patch/test_extraneous_whitespace_patch_90674909.patch
krllint,https://github.com/d4nuu8/krllint,2f9376cdae14c201364d9c31b4c19a8ff2f708d2,tests/test_indentation_checker.py::IndentationCheckerTestCase::test_rule_with_fix,victim,tests/test_lower_or_mixed_case_keyword.py::LowerOrMixedCaseKeywordTestCase::test_rule_with_fix,tests/test_indentation_checker.py::IndentationCheckerTestCase::test_rule_without_fix,"59a60,63
>         cli_args = _create_arg_parser().parse_args(['test_rule_without_fix'])
>         linter = Linter(cli_args, config)
>         (lines, reporter) = linter.lint_lines('test_rule_without_fix', self.TEST_INPUT)
>         self.assertEqual(reporter.found_issues[Category.CONVENTION], 0)
",krllint/ipflakies_result/8a552cdd/patch/test_indentation_checker_patch_d4b27aaa.patch
krllint,https://github.com/d4nuu8/krllint,2f9376cdae14c201364d9c31b4c19a8ff2f708d2,tests/test_lower_or_mixed_case_built_in_type.py::LowerOrMixedCaseBuiltInTestCase::test_rule_with_fix,victim,tests/test_lower_or_mixed_case_keyword.py::LowerOrMixedCaseKeywordTestCase::test_rule_with_fix,tests/test_lower_or_mixed_case_built_in_type.py::LowerOrMixedCaseBuiltInTestCase::test_rule_without_fix,"34a35,40
>         cli_args = _create_arg_parser().parse_args(['test_rule_without_fix'])
>         reload(config)
>         config.REPORTER = MemoryReporter
>         linter = Linter(cli_args, config)
>         (lines, reporter) = linter.lint_lines('test_rule_without_fix', self.TEST_INPUT)
>         self.assertEqual(reporter.found_issues[Category.CONVENTION], 0)
",krllint/ipflakies_result/3ce68947/patch/test_lower_or_mixed_case_built_in_type_patch_865aaa66.patch
krllint,https://github.com/d4nuu8/krllint,2f9376cdae14c201364d9c31b4c19a8ff2f708d2,tests/test_lower_or_mixed_case_built_in_type.py::LowerOrMixedCaseBuiltInTestCase::test_rule_without_fix,victim,tests/test_lower_or_mixed_case_keyword.py::LowerOrMixedCaseKeywordTestCase::test_rule_without_fix,tests/test_extraneous_whitespace.py::ExtraneousWhiteSpaceTestCase::test_rule_with_fix,"14a15,18
>         cli_args = _create_arg_parser().parse_args(['--fix', 'test_rule_with_fix'])
>         linter = Linter(cli_args, config)
>         (lines, _) = linter.lint_lines('test_rule_with_fix', self.TEST_INPUT)
>         self.assertEqual(lines, self.FIXED_INPUT)
",krllint/ipflakies_result/2061b159/patch/test_lower_or_mixed_case_built_in_type_patch_90674909.patch
krllint,https://github.com/d4nuu8/krllint,2f9376cdae14c201364d9c31b4c19a8ff2f708d2,tests/test_open_task.py::OpenTaskTestCase::test_rule_with_fix,victim,tests/test_lower_or_mixed_case_keyword.py::LowerOrMixedCaseKeywordTestCase::test_rule_with_fix,tests/test_lower_or_mixed_case_built_in_type.py::LowerOrMixedCaseBuiltInTestCase::test_rule_without_fix,"33a34,39
>         cli_args = _create_arg_parser().parse_args(['test_rule_without_fix'])
>         reload(config)
>         config.REPORTER = MemoryReporter
>         linter = Linter(cli_args, config)
>         (lines, reporter) = linter.lint_lines('test_rule_without_fix', self.TEST_INPUT)
>         self.assertEqual(reporter.found_issues[Category.CONVENTION], 0)
",krllint/ipflakies_result/1a2ef79d/patch/test_open_task_patch_865aaa66.patch
krllint,https://github.com/d4nuu8/krllint,2f9376cdae14c201364d9c31b4c19a8ff2f708d2,tests/test_open_task.py::OpenTaskTestCase::test_rule_without_fix,victim,tests/test_lower_or_mixed_case_keyword.py::LowerOrMixedCaseKeywordTestCase::test_rule_without_fix,tests/test_extraneous_whitespace.py::ExtraneousWhiteSpaceTestCase::test_rule_with_fix,"13a14,17
>         cli_args = _create_arg_parser().parse_args(['--fix', 'test_rule_with_fix'])
>         config.REPORTER = MemoryReporter
>         linter = Linter(cli_args, config)
>         (lines, _) = linter.lint_lines('test_rule_with_fix', self.TEST_INPUT)
",krllint/ipflakies_result/8e6050b2/patch/test_open_task_patch_90674909.patch
krllint,https://github.com/d4nuu8/krllint,2f9376cdae14c201364d9c31b4c19a8ff2f708d2,tests/test_trailing_white_space_rule.py::TrailingWhiteSpaceTestCase::test_rule_with_fix,victim,tests/test_lower_or_mixed_case_keyword.py::LowerOrMixedCaseKeywordTestCase::test_rule_with_fix,tests/test_extraneous_whitespace.py::ExtraneousWhiteSpaceTestCase::test_rule_without_fix,"34a35,40
>         cli_args = _create_arg_parser().parse_args(['test_rule_without_fix'])
>         reload(config)
>         config.REPORTER = MemoryReporter
>         linter = Linter(cli_args, config)
>         (lines, reporter) = linter.lint_lines('test_rule_without_fix', self.TEST_INPUT)
>         self.assertEqual(reporter.found_issues[Category.CONVENTION], 1)
",krllint/ipflakies_result/3a414bcf/patch/test_trailing_white_space_rule_patch_916f7d1b.patch
krllint,https://github.com/d4nuu8/krllint,2f9376cdae14c201364d9c31b4c19a8ff2f708d2,tests/test_trailing_white_space_rule.py::TrailingWhiteSpaceTestCase::test_rule_without_fix,victim,tests/test_lower_or_mixed_case_keyword.py::LowerOrMixedCaseKeywordTestCase::test_rule_without_fix,tests/test_extraneous_whitespace.py::ExtraneousWhiteSpaceTestCase::test_rule_with_fix,"14a15,18
>         cli_args = _create_arg_parser().parse_args(['--fix', 'test_rule_with_fix'])
>         linter = Linter(cli_args, config)
>         (lines, _) = linter.lint_lines('test_rule_with_fix', self.TEST_INPUT)
>         self.assertEqual(lines, self.FIXED_INPUT)
",krllint/ipflakies_result/e99ab5fb/patch/test_trailing_white_space_rule_patch_90674909.patch
laminar,https://github.com/dgellerup/laminar,74258f6e6cc8b3b4e9eaf7cc522192a353a3b45e,test/test_laminar.py::test_init_my_lam,victim,test/test_laminar.py::test_my_lam,test/test_iter_flow.py::test_iterflow_basic,"103a104
>     result = laminar.iter_flow(le.single_total, le.laminar_df['Col1'])
",laminar/ipflakies_result/673a2011/patch/test_laminar_patch_c3234334.patch
lithoxyl,https://github.com/mahmoud/lithoxyl,9961553a065a1ad8bb7a2407fe74f2cfd6c79a20,lithoxyl/tests/test_stats.py::test_acc_random,brittle,lithoxyl/tests/test_stats.py::test_momentacc_norm,,"97a98,100
>     ma = MomentAccumulator()
>     for v in [random.gauss(10, 4) for i in range(5000)]:
>         ma.add(v)
",lithoxyl/ipflakies_result/a0ed9172/patch/test_stats_patch_6f595098.patch
ljson,https://github.com/daknuett/ljson,1d3dc13001d9d2f61bcfbf9d5c5b16d44fb8076e,test/test_ljson_disk.py::test_contains,victim,test/test_ljson_mem.py::test_edit,test/test_ljson_mem.py::test_unique_check,"254a255,260
>     import copy
>     header_descriptor_ = copy.copy(header_descriptor)
>     header_descriptor_['name']['modifiers'] = ['unique']
>     header = ljson.base.generic.Header(header_descriptor_)
>     table = ljson.base.mem.Table(header, data)
>     table.additem(item_meg)
",ljson/ipflakies_result/8e7b0620/patch/test_ljson_disk_patch_a0036998.patch
ljson,https://github.com/daknuett/ljson,1d3dc13001d9d2f61bcfbf9d5c5b16d44fb8076e,test/test_ljson_mem.py::test_contains,victim,test/test_ljson_mem.py::test_edit,test/test_ljson_mem.py::test_unique_check,"92a93,98
>     import copy
>     header_descriptor_ = copy.copy(header_descriptor)
>     header_descriptor_['name']['modifiers'] = ['unique']
>     header = ljson.base.generic.Header(header_descriptor_)
>     table = ljson.base.mem.Table(header, data)
>     table.additem(item_meg)
",ljson/ipflakies_result/8c07b3bd/patch/test_ljson_mem_patch_a0036998.patch
logx,https://github.com/djrobstep/logx,c53fabbc160fb8d70fa878684ea36f0c22fd5caa,tests/test_logx.py::test_set_format,victim,tests/test_logx.py::test_level_change_output,tests/test_logx.py::test_null_handler,"43a44,49
>     log.set_null_handler()
>     log.clear_null_handler()
>     log.warn('warn')
>     log.debug('debug')
>     (out, err) = capsys.readouterr()
>     assert (('warn' in err) and ('warn' not in out))
",logx/ipflakies_result/c162d99c/patch/test_logx_patch_7982139e.patch
logzero,https://github.com/metachris/logzero,b5d49fc2b118c370994c4ae5360d7c246d43ddc8,tests/test_logzero.py::test_default_logger_stderr_output,brittle,tests/test_logzero.py::test_default_logger_logfile_only,,"283a284
>     test_default_logger(disableStdErrorLogger=True)
",logzero/ipflakies_result/6f4cd85d/patch/test_logzero_patch_876d1183.patch
model-sdk,https://github.com/runwayml/model-sdk,3132b2ab424f1020e8d30e4897057103ab3e6623,tests/test_model.py::test_model_setup_and_command,victim,tests/test_model.py::test_gpu_in_manifest_gpu_env_true,tests/test_model.py::test_gpu_in_manifest_no_env_set,"34a35,39
>     rw = RunwayModel()
>     rw.run(debug=True)
>     client = get_test_client(rw)
>     if (os.environ.get('GPU') is not None):
>         del os.environ['GPU']
",model-sdk/ipflakies_result/4ba9ba3a/patch/test_model_patch_0d256c9c.patch
moyasar-python,https://github.com/moyasar/moyasar-python,aa8716ae3f98f8782141abe6869dfbb90af98b62,tests/moyasar_test.py::test_request_should_return_json_object,brittle,tests/moyasar_test.py::test_should_accept_api_key,,"14a15
>     moyasar.api_key = 'sk_test_BQokikJOvBiI2HlWgH4olfQ2'
",moyasar-python/ipflakies_result/c6a5dae6/patch/moyasar_test_patch_18dd0d73.patch
multiindex,https://github.com/sushobhit27/multiindex,b631e60bd47558eca9067a0dc87f0e713cddc6f2,multiindex/tests/test_multiindex.py::test_remove,brittle,multiindex/tests/test_multiindex.py::test_modify,,"68a69
>     mi.modify('emp_id', 786, 666)
",multiindex/ipflakies_result/370cabb4/patch/test_multiindex_patch_79fd4b6d.patch
neon,https://github.com/mrmechko/neon,42ad78e3d79583a93abce6d06b81dafc29017514,tests/basic_tests.py::test_dont_memoize,brittle,tests/basic_tests.py::test_memoize,,"32a33
>     assert (fib(29) == (((((2 ** 3) * 5) * 11) * 31) * 61))
",neon/ipflakies_result/b5944a47/patch/basic_tests_patch_847f52fe.patch
neurodsp,https://github.com/neurodsp-tools/neurodsp,19aa50c71deaa19e4ed85efa192afa8ab63d0bf1,neurodsp/tests/utils/test_download.py::test_check_data_file,brittle,neurodsp/tests/utils/test_download.py::test_check_data_folder,,"28a29
>     assert os.path.isdir(TEST_FOLDER)
",neurodsp/ipflakies_result/dda65ae4/patch/test_download_patch_890215fc.patch
nodal,https://github.com/thimic/nodal,261eeefd50298765c5722c5f7da72e6f2927bd3e,tests/nodal/nodes/test_noop.py::TestNoOp::test_name,victim,tests/nodal/core/test_callbacks.py::TestCallbacks::test__trigger,tests/nodal/core/test_callbacks.py::TestCallbacks::test_clear,"31a32
>         Callbacks.clear()
",nodal/ipflakies_result/7aeda1e5/patch/test_noop_patch_423234d5.patch
nodal,https://github.com/thimic/nodal,261eeefd50298765c5722c5f7da72e6f2927bd3e,tests/nodal/test_graph.py::TestGraph::test__on_node_create,victim,tests/nodal/core/test_callbacks.py::TestCallbacks::test__trigger,tests/nodal/core/test_callbacks.py::TestCallbacks::test_clear,"85a86
>         Callbacks.clear()
",nodal/ipflakies_result/e4d894d0/patch/test_graph_patch_423234d5.patch
nodal,https://github.com/thimic/nodal,261eeefd50298765c5722c5f7da72e6f2927bd3e,tests/nodal/test_graph.py::TestGraph::test__on_node_destroy,victim,tests/nodal/core/test_callbacks.py::TestCallbacks::test__trigger,tests/nodal/core/test_callbacks.py::TestCallbacks::test_clear,"103a104
>         Callbacks.clear()
",nodal/ipflakies_result/8b37e5f3/patch/test_graph_patch_423234d5.patch
parse_it,https://github.com/naorlivne/parse_it,886d7de0e74e67edc136411a5220e35c1149e743,test/test_prase_it.py::BaseTests::test_parser_read_all_configuration_variables_raise_allowed_types_error,brittle,test/test_prase_it.py::BaseTests::test_read_envvar_single_file_config,,"1300a1301
>         os.environ['FILE_TYPE'] = 'envvar'
",parse_it/ipflakies_result/a3540fe8/patch/test_prase_it_patch_9605c944.patch
pook,https://github.com/h2non/pook,2071da27701c82ce02b015e01e2aa6fd203e7bb5,tests/unit/api_test.py::test_mock_contructors,victim,tests/integration/pook_requests_test.py::test_requests_get,tests/unit/api_test.py::test_on,"40a41,44
>     assert (engine.active is False)
>     api.on()
>     assert (engine.active is True)
>     api.off()
",pook/ipflakies_result/ca5ac514/patch/api_test_patch_b12d6e9f.patch
primrose,https://github.com/ww-tech/primrose,bd9bb8d5d5aaf31d473d01645a862ac9d5fc6f8e,test/test_factory.py::test_unregister,victim,test/test_dag_runner.py::test_run4,test/test_factory.py::test_init,"34a35,38
>     f2 = NodeFactory()
>     n = len(set(f1.name_dict.keys()))
>     f1.unregister('TestWriter')
>     f1 = NodeFactory()
",primrose/ipflakies_result/ac42159a/patch/test_factory_patch_6f19fc89.patch
promise,https://github.com/syrusakbary/promise,4627315476f6b9fc82818327ae09b04f89f9bda7,tests/test_dataloader.py::test_wrong_loader_return_type_does_not_block_async_instance,brittle,tests/test_dataloader.py::test_build_a_simple_data_loader,,"438a439,442
> 
>     def call_fn(keys):
>         return Promise.resolve(keys)
>     identity_loader = DataLoader(call_fn)
",promise/ipflakies_result/dcc38ed9/patch/test_dataloader_patch_7eb30c88.patch
pyTrnsysType,https://github.com/samuelduchesne/pyTrnsysType,6cf552e4ccd66f7b728e84654e580befe2061114,tests/test_xml.py::TestTrnsysModel::test_get_attr_derivative,victim,tests/test_xml.py::TestTrnsysModel::test_set_attr_derivative,tests/test_utils.py::TestRedistributeVertices::test_redistribute_vertices_wrongtype,"175a176
>         'Tests unsupported geometry'
",pyTrnsysType/ipflakies_result/fc72d3fc/patch/test_xml_patch_3fab9b9e.patch
pyatlasclient,https://github.com/verdan/pyatlasclient,6c3ef3926eef059f00730b6bcc1a1787f6bbcd9c,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,victim,tests/test_models.py::TestDiscoveryREST::test_search_basic_get,tests/test_client.py::TestClient::test_atlas_client,"453a454
>         client = Atlas('localhost', port=21000, username='admin', password='admin')
",pyatlasclient/ipflakies_result/9953f7c0/patch/test_models_patch_ef06bded.patch
pyatlasclient,https://github.com/verdan/pyatlasclient,6c3ef3926eef059f00730b6bcc1a1787f6bbcd9c,tests/test_models.py::TestDiscoveryREST::test_search_attribute_get,victim,tests/test_models.py::TestDiscoveryREST::test_search_basic_get,tests/test_models.py::TestEntityREST::test_entity_post,"453a454
>         mocker.patch.object(atlas_client.entity_post.client, 'post')
",pyatlasclient/ipflakies_result/9953f7c0/patch/test_models_patch_a6f47ca2.patch
pydbvolve,https://github.com/Teamworksapp/pydbvolve,e18bb8cf98997c52de0cf30a8e106c480ba0bb57,tests/unittests/test_00_initialization.py::test_09_get_migration_table_schema,victim,tests/unittests/test_00_initialization.py::test_14_load_config,tests/unittests/test_00_initialization.py::test_15_run_config,"102a103
>     importlib.reload(pydbvolve)
",pydbvolve/ipflakies_result/f9270d5e/patch/test_00_initialization_patch_117f2f20.patch
pydbvolve,https://github.com/Teamworksapp/pydbvolve,e18bb8cf98997c52de0cf30a8e106c480ba0bb57,tests/unittests/test_00_initialization.py::test_13_pre_config,victim,tests/unittests/test_00_initialization.py::test_14_load_config,tests/unittests/test_00_initialization.py::test_15_run_config,"154a155
>     importlib.reload(pydbvolve)
",pydbvolve/ipflakies_result/97b1a38e/patch/test_00_initialization_patch_117f2f20.patch
pydbvolve,https://github.com/Teamworksapp/pydbvolve,e18bb8cf98997c52de0cf30a8e106c480ba0bb57,tests/unittests/test_01_migration_table.py::test_02_check_migration_table_bad_structure,brittle,tests/unittests/test_01_migration_table.py::test_01_check_migration_table_init,,"129a130,133
>     'Verify that the migration table can be detected'
>     config = pydbvolve.initialize(TEST_CONFIG_FILE, 'info', 'r1.1.10', True, False)
>     _drop_migration_table(config)
>     res = pydbvolve.check_migration_table(config)
",pydbvolve/ipflakies_result/ab7d7951/patch/test_01_migration_table_patch_61fd7129.patch
python-fs,https://github.com/chaosmail/python-fs,2567922ced9387e327e65f3244caff3b7af35684,fs/tests/test_mkdir.py::test_mkdir,victim,fs/tests/test_mkdir.py::test_mkdir_recursive,fs/tests/test_add_prefix.py::test_add_prefix_to_filename,"8a9
>     _expected = 'pre_test.csv'
",python-fs/ipflakies_result/657ba33d/patch/test_mkdir_patch_62137649.patch
pyserverpilot,https://github.com/opper/pyserverpilot,b6b896fea1155fa95febde84f74e0d2230523ab0,tests/test_app.py::TestApp::test_add_ssl,brittle,tests/test_app.py::TestApp::test_create_app,,"94a95,98
>         mock_sp.return_value = AppMock('get_app')
>         app_data = AppMock.create_app()['data']
>         response = client.create_app(**app_data)
>         shared['app'] = response
",pyserverpilot/ipflakies_result/92b7ffd9/patch/test_app_patch_24229221.patch
pyserverpilot,https://github.com/opper/pyserverpilot,b6b896fea1155fa95febde84f74e0d2230523ab0,tests/test_app.py::TestApp::test_get_app,brittle,tests/test_app.py::TestApp::test_create_app,,"36a37,40
>         app_data = AppMock.create_app()['data']
>         response = client.create_app(**app_data)
>         shared['app'] = response
>         mock_sp.return_value = AppMock('get_app')
",pyserverpilot/ipflakies_result/a9b4bee6/patch/test_app_patch_24229221.patch
pyserverpilot,https://github.com/opper/pyserverpilot,b6b896fea1155fa95febde84f74e0d2230523ab0,tests/test_app.py::TestApp::test_update_app_validation,brittle,tests/test_app.py::TestApp::test_create_app,,"82a83,86
>         mock_sp.return_value = AppMock('get_app')
>         app_data = AppMock.create_app()['data']
>         response = client.create_app(**app_data)
>         shared['app'] = response
",pyserverpilot/ipflakies_result/d20a5553/patch/test_app_patch_24229221.patch
pyserverpilot,https://github.com/opper/pyserverpilot,b6b896fea1155fa95febde84f74e0d2230523ab0,tests/test_db.py::TestDb::test_get_db,brittle,tests/test_db.py::TestDb::test_create_db,,"42a43,46
>         mock_sp.return_value = DbMock('get_db')
>         db_data = DbMock.create_db()['data']
>         response = client.create_db(**db_data)
>         shared['db'] = response
",pyserverpilot/ipflakies_result/3c3c60c8/patch/test_db_patch_ab67d6b9.patch
pyserverpilot,https://github.com/opper/pyserverpilot,b6b896fea1155fa95febde84f74e0d2230523ab0,tests/test_db.py::TestDb::test_update_db,brittle,tests/test_db.py::TestDb::test_create_db,,"82a83,86
>         mock_sp.return_value = DbMock('get_db')
>         db_data = DbMock.create_db()['data']
>         response = client.create_db(**db_data)
>         shared['db'] = response
",pyserverpilot/ipflakies_result/2749b91e/patch/test_db_patch_ab67d6b9.patch
pysllo,https://github.com/kivio/pysllo,8bc4d17f9a668e9aff3c77f688f0c06ed2e7686b,tests/test_propagation_logger.py::test_forcing_level_by_dict,victim,tests/test_propagation_logger.py::test_forcing_level_by_level_value,tests/test_propagation_logger.py::test_level_propagation,"1,128c1,140
< import pytest
< import logging
< 
< 
< def test_forcing_level_by_level_value(propagation_logger, handler):
<     msg = ""TEST""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logging.DEBUG)
<     propagation_logger.debug(msg)
<     record = handler.pop()
< 
<     assert record.msg == msg
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_by_level_name(propagation_logger, handler):
<     msg = ""TEST""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))
<     propagation_logger.debug(msg)
<     record = handler.pop()
<     assert record.msg == msg
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_level_propagation(propagation_logger, handler):
<     msg1 = ""TEST1""
<     msg2 = ""TEST2""
<     propagation_logger.set_propagation(True)
<     propagation_logger.setLevel(logging.INFO)
< 
<     def test_second_level():
<         propagation_logger.debug(msg2)
< 
<     @propagation_logger.level_propagation(logging.DEBUG)
<     def test_first_level():
<         propagation_logger.debug(msg1)
<         test_second_level()
< 
<     test_first_level()
<     test_second_level()
< 
<     record2 = handler.pop()
<     record1 = handler.pop()
<     assert record1.levelname == logging.getLevelName(logging.DEBUG)
<     assert record2.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_reset_level(propagation_logger, handler):
<     msg = ""TEST""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))
<     propagation_logger.reset_level()
<     propagation_logger.debug(msg)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):
<     msg1 = ""TEST1""
<     msg2 = ""TEST2""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logger_1=logging.DEBUG)
<     additional_logger = logging.getLogger('logger_1')
<     additional_logger.setLevel(logging.INFO)
<     additional_logger.addHandler(handler)
<     propagation_logger.debug(msg1)
<     additional_logger.debug(msg2)
<     record = handler.pop()
<     assert record.msg == msg2
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):
<     msg1 = ""TEST1""
<     msg2 = ""TEST2""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logger_1=""DEBUG"")
<     additional_logger = logging.getLogger('logger_1')
<     additional_logger.setLevel(logging.INFO)
<     additional_logger.addHandler(handler)
<     propagation_logger.debug(msg1)
<     additional_logger.debug(msg2)
<     record = handler.pop()
<     assert record.msg == msg2
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_by_dict(propagation_logger, handler):
<     msg1 = ""TEST1""
<     msg2 = ""TEST2""
<     propagation_logger.setLevel(logging.INFO)
<     levels = {
<             'logger_1': logging.DEBUG
<         }
<     propagation_logger.force_level(levels)
<     additional_logger = logging.getLogger('logger_1')
<     additional_logger.setLevel(logging.INFO)
<     additional_logger.addHandler(handler)
<     propagation_logger.debug(msg1)
<     additional_logger.debug(msg2)
<     record = handler.pop()
<     assert record.msg == msg2
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_without_args_and_kwargs(propagation_logger, handler):
<     with pytest.raises(TypeError) as exc_info:
<         propagation_logger.force_level()
<     assert '0 given' in str(exc_info.value)
< 
< 
< def test_forcing_level_with_too_many_args(propagation_logger, handler):
<     with pytest.raises(TypeError) as exc_info:
<         propagation_logger.force_level(logging.DEBUG, logging.DEBUG)
<     assert '2 given' in str(exc_info.value)
---
> import pytest
> import logging
> 
> 
> def test_forcing_level_by_level_value(propagation_logger, handler):
>     msg = ""TEST""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logging.DEBUG)
>     propagation_logger.debug(msg)
>     record = handler.pop()
> 
>     assert record.msg == msg
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_by_level_name(propagation_logger, handler):
>     msg = ""TEST""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))
>     propagation_logger.debug(msg)
>     record = handler.pop()
>     assert record.msg == msg
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_level_propagation(propagation_logger, handler):
>     msg1 = ""TEST1""
>     msg2 = ""TEST2""
>     propagation_logger.set_propagation(True)
>     propagation_logger.setLevel(logging.INFO)
> 
>     def test_second_level():
>         propagation_logger.debug(msg2)
> 
>     @propagation_logger.level_propagation(logging.DEBUG)
>     def test_first_level():
>         propagation_logger.debug(msg1)
>         test_second_level()
> 
>     test_first_level()
>     test_second_level()
> 
>     record2 = handler.pop()
>     record1 = handler.pop()
>     assert record1.levelname == logging.getLevelName(logging.DEBUG)
>     assert record2.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_reset_level(propagation_logger, handler):
>     msg = ""TEST""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))
>     propagation_logger.reset_level()
>     propagation_logger.debug(msg)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):
>     msg1 = ""TEST1""
>     msg2 = ""TEST2""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logger_1=logging.DEBUG)
>     additional_logger = logging.getLogger('logger_1')
>     additional_logger.setLevel(logging.INFO)
>     additional_logger.addHandler(handler)
>     propagation_logger.debug(msg1)
>     additional_logger.debug(msg2)
>     record = handler.pop()
>     assert record.msg == msg2
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):
>     msg1 = ""TEST1""
>     msg2 = ""TEST2""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logger_1=""DEBUG"")
>     additional_logger = logging.getLogger('logger_1')
>     additional_logger.setLevel(logging.INFO)
>     additional_logger.addHandler(handler)
>     propagation_logger.debug(msg1)
>     additional_logger.debug(msg2)
>     record = handler.pop()
>     assert record.msg == msg2
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_by_dict(propagation_logger, handler):
>     msg1 = 'TEST1'
>     msg2 = 'TEST2'
> 
>     def test_second_level():
>         propagation_logger.debug(msg2)
> 
>     @propagation_logger.level_propagation(logging.DEBUG)
>     def test_first_level():
>         propagation_logger.debug(msg1)
>         test_second_level()
>     test_first_level()
>     record2 = handler.pop()
>     msg1 = ""TEST1""
>     msg2 = ""TEST2""
>     propagation_logger.setLevel(logging.INFO)
>     levels = {
>             'logger_1': logging.DEBUG
>         }
>     propagation_logger.force_level(levels)
>     additional_logger = logging.getLogger('logger_1')
>     additional_logger.setLevel(logging.INFO)
>     additional_logger.addHandler(handler)
>     propagation_logger.debug(msg1)
>     additional_logger.debug(msg2)
>     record = handler.pop()
>     assert record.msg == msg2
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_without_args_and_kwargs(propagation_logger, handler):
>     with pytest.raises(TypeError) as exc_info:
>         propagation_logger.force_level()
>     assert '0 given' in str(exc_info.value)
> 
> 
> def test_forcing_level_with_too_many_args(propagation_logger, handler):
>     with pytest.raises(TypeError) as exc_info:
>         propagation_logger.force_level(logging.DEBUG, logging.DEBUG)
>     assert '2 given' in str(exc_info.value)
",pysllo/ipflakies_result/56100062/patch/test_propagation_logger_patch_54a65526.patch
pysllo,https://github.com/kivio/pysllo,8bc4d17f9a668e9aff3c77f688f0c06ed2e7686b,tests/test_propagation_logger.py::test_forcing_level_by_dict,victim,tests/test_propagation_logger.py::test_forcing_level_by_level_value,tests/test_propagation_logger.py::test_reset_level,"1,128c1,129
< import pytest
< import logging
< 
< 
< def test_forcing_level_by_level_value(propagation_logger, handler):
<     msg = ""TEST""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logging.DEBUG)
<     propagation_logger.debug(msg)
<     record = handler.pop()
< 
<     assert record.msg == msg
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_by_level_name(propagation_logger, handler):
<     msg = ""TEST""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))
<     propagation_logger.debug(msg)
<     record = handler.pop()
<     assert record.msg == msg
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_level_propagation(propagation_logger, handler):
<     msg1 = ""TEST1""
<     msg2 = ""TEST2""
<     propagation_logger.set_propagation(True)
<     propagation_logger.setLevel(logging.INFO)
< 
<     def test_second_level():
<         propagation_logger.debug(msg2)
< 
<     @propagation_logger.level_propagation(logging.DEBUG)
<     def test_first_level():
<         propagation_logger.debug(msg1)
<         test_second_level()
< 
<     test_first_level()
<     test_second_level()
< 
<     record2 = handler.pop()
<     record1 = handler.pop()
<     assert record1.levelname == logging.getLevelName(logging.DEBUG)
<     assert record2.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_reset_level(propagation_logger, handler):
<     msg = ""TEST""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))
<     propagation_logger.reset_level()
<     propagation_logger.debug(msg)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):
<     msg1 = ""TEST1""
<     msg2 = ""TEST2""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logger_1=logging.DEBUG)
<     additional_logger = logging.getLogger('logger_1')
<     additional_logger.setLevel(logging.INFO)
<     additional_logger.addHandler(handler)
<     propagation_logger.debug(msg1)
<     additional_logger.debug(msg2)
<     record = handler.pop()
<     assert record.msg == msg2
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):
<     msg1 = ""TEST1""
<     msg2 = ""TEST2""
<     propagation_logger.setLevel(logging.INFO)
<     propagation_logger.force_level(logger_1=""DEBUG"")
<     additional_logger = logging.getLogger('logger_1')
<     additional_logger.setLevel(logging.INFO)
<     additional_logger.addHandler(handler)
<     propagation_logger.debug(msg1)
<     additional_logger.debug(msg2)
<     record = handler.pop()
<     assert record.msg == msg2
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_by_dict(propagation_logger, handler):
<     msg1 = ""TEST1""
<     msg2 = ""TEST2""
<     propagation_logger.setLevel(logging.INFO)
<     levels = {
<             'logger_1': logging.DEBUG
<         }
<     propagation_logger.force_level(levels)
<     additional_logger = logging.getLogger('logger_1')
<     additional_logger.setLevel(logging.INFO)
<     additional_logger.addHandler(handler)
<     propagation_logger.debug(msg1)
<     additional_logger.debug(msg2)
<     record = handler.pop()
<     assert record.msg == msg2
<     assert record.levelname == logging.getLevelName(logging.DEBUG)
<     with pytest.raises(IndexError):
<         handler.pop()
< 
< 
< def test_forcing_level_without_args_and_kwargs(propagation_logger, handler):
<     with pytest.raises(TypeError) as exc_info:
<         propagation_logger.force_level()
<     assert '0 given' in str(exc_info.value)
< 
< 
< def test_forcing_level_with_too_many_args(propagation_logger, handler):
<     with pytest.raises(TypeError) as exc_info:
<         propagation_logger.force_level(logging.DEBUG, logging.DEBUG)
<     assert '2 given' in str(exc_info.value)
---
> import pytest
> import logging
> 
> 
> def test_forcing_level_by_level_value(propagation_logger, handler):
>     msg = ""TEST""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logging.DEBUG)
>     propagation_logger.debug(msg)
>     record = handler.pop()
> 
>     assert record.msg == msg
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_by_level_name(propagation_logger, handler):
>     msg = ""TEST""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))
>     propagation_logger.debug(msg)
>     record = handler.pop()
>     assert record.msg == msg
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_level_propagation(propagation_logger, handler):
>     msg1 = ""TEST1""
>     msg2 = ""TEST2""
>     propagation_logger.set_propagation(True)
>     propagation_logger.setLevel(logging.INFO)
> 
>     def test_second_level():
>         propagation_logger.debug(msg2)
> 
>     @propagation_logger.level_propagation(logging.DEBUG)
>     def test_first_level():
>         propagation_logger.debug(msg1)
>         test_second_level()
> 
>     test_first_level()
>     test_second_level()
> 
>     record2 = handler.pop()
>     record1 = handler.pop()
>     assert record1.levelname == logging.getLevelName(logging.DEBUG)
>     assert record2.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_reset_level(propagation_logger, handler):
>     msg = ""TEST""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logging.getLevelName(logging.DEBUG))
>     propagation_logger.reset_level()
>     propagation_logger.debug(msg)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):
>     msg1 = ""TEST1""
>     msg2 = ""TEST2""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logger_1=logging.DEBUG)
>     additional_logger = logging.getLogger('logger_1')
>     additional_logger.setLevel(logging.INFO)
>     additional_logger.addHandler(handler)
>     propagation_logger.debug(msg1)
>     additional_logger.debug(msg2)
>     record = handler.pop()
>     assert record.msg == msg2
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_with_kwargs_by_level(propagation_logger, handler):
>     msg1 = ""TEST1""
>     msg2 = ""TEST2""
>     propagation_logger.setLevel(logging.INFO)
>     propagation_logger.force_level(logger_1=""DEBUG"")
>     additional_logger = logging.getLogger('logger_1')
>     additional_logger.setLevel(logging.INFO)
>     additional_logger.addHandler(handler)
>     propagation_logger.debug(msg1)
>     additional_logger.debug(msg2)
>     record = handler.pop()
>     assert record.msg == msg2
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_by_dict(propagation_logger, handler):
>     propagation_logger.reset_level()
>     msg1 = ""TEST1""
>     msg2 = ""TEST2""
>     propagation_logger.setLevel(logging.INFO)
>     levels = {
>             'logger_1': logging.DEBUG
>         }
>     propagation_logger.force_level(levels)
>     additional_logger = logging.getLogger('logger_1')
>     additional_logger.setLevel(logging.INFO)
>     additional_logger.addHandler(handler)
>     propagation_logger.debug(msg1)
>     additional_logger.debug(msg2)
>     record = handler.pop()
>     assert record.msg == msg2
>     assert record.levelname == logging.getLevelName(logging.DEBUG)
>     with pytest.raises(IndexError):
>         handler.pop()
> 
> 
> def test_forcing_level_without_args_and_kwargs(propagation_logger, handler):
>     with pytest.raises(TypeError) as exc_info:
>         propagation_logger.force_level()
>     assert '0 given' in str(exc_info.value)
> 
> 
> def test_forcing_level_with_too_many_args(propagation_logger, handler):
>     with pytest.raises(TypeError) as exc_info:
>         propagation_logger.force_level(logging.DEBUG, logging.DEBUG)
>     assert '2 given' in str(exc_info.value)
",pysllo/ipflakies_result/56100062/patch/test_propagation_logger_patch_8633acad.patch
pyswarms,https://github.com/ljvmiranda921/pyswarms,08756526f39699eef28e515cac2ead17cef55710,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_effect[GeneralOptimizerPSO],victim,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_assertion[GlobalBestPSO],tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_effect[GlobalBestPSO],"93a94
>         (optm, params) = optimizer
",pyswarms/ipflakies_result/1f26ddd8/patch/test_tolerance_patch_0b31c6fa.patch
pyswarms,https://github.com/ljvmiranda921/pyswarms,08756526f39699eef28e515cac2ead17cef55710,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_effect[GlobalBestPSO],victim,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_assertion[GlobalBestPSO],tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_effect[GlobalBestPSO],"93a94
>         (optm, params) = optimizer
",pyswarms/ipflakies_result/2b2af743/patch/test_tolerance_patch_0b31c6fa.patch
pyswarms,https://github.com/ljvmiranda921/pyswarms,08756526f39699eef28e515cac2ead17cef55710,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_effect[LocalBestPSO],victim,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_assertion[GlobalBestPSO],tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_effect[GlobalBestPSO],"93a94
>         (optm, params) = optimizer
",pyswarms/ipflakies_result/ff42dfd7/patch/test_tolerance_patch_0b31c6fa.patch
pyswarms,https://github.com/ljvmiranda921/pyswarms,08756526f39699eef28e515cac2ead17cef55710,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_no_ftol[GeneralOptimizerPSO],victim,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_assertion[GlobalBestPSO],tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_effect[GlobalBestPSO],"86a87
>         (optm, params) = optimizer
",pyswarms/ipflakies_result/2f12e0f2/patch/test_tolerance_patch_0b31c6fa.patch
pyswarms,https://github.com/ljvmiranda921/pyswarms,08756526f39699eef28e515cac2ead17cef55710,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_no_ftol[GlobalBestPSO],victim,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_assertion[GlobalBestPSO],tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_effect[GlobalBestPSO],"86a87
>         (optm, params) = optimizer
",pyswarms/ipflakies_result/89a552dd/patch/test_tolerance_patch_0b31c6fa.patch
pyswarms,https://github.com/ljvmiranda921/pyswarms,08756526f39699eef28e515cac2ead17cef55710,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_no_ftol[LocalBestPSO],victim,tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_assertion[GlobalBestPSO],tests/optimizers/test_tolerance.py::TestToleranceOptions::test_ftol_iter_effect[GlobalBestPSO],"86a87
>         (optm, params) = optimizer
",pyswarms/ipflakies_result/9a3c75df/patch/test_tolerance_patch_0b31c6fa.patch
python-n26,https://github.com/femueller/python-n26,22cb609efbf5125e36879441ea20d5a1c2a51e98,tests/test_cards.py::CardsTests::test_block_card_cli_all,brittle,tests/test_cards.py::CardsTests::test_cards_cli,,"27a28,29
>         from n26.cli import cards
>         result = self._run_cli_cmd(cards)
",python-n26/ipflakies_result/ab1642ec/patch/test_cards_patch_649641ec.patch
python-n26,https://github.com/femueller/python-n26,22cb609efbf5125e36879441ea20d5a1c2a51e98,tests/test_cards.py::CardsTests::test_block_card_cli_single,brittle,tests/test_cards.py::CardsTests::test_block_card_cli_all,,"20a21,24
>         card_id_1 = '12345678-1234-abcd-abcd-1234567890ab'
>         card_id_2 = '22345678-1234-abcd-abcd-1234567890ab'
>         result = self._run_cli_cmd(card_block)
>         from n26.cli import card_block
",python-n26/ipflakies_result/c967cb31/patch/test_cards_patch_8b1b2edf.patch
python-n26,https://github.com/femueller/python-n26,22cb609efbf5125e36879441ea20d5a1c2a51e98,tests/test_cards.py::CardsTests::test_unblock_card_cli_single,brittle,tests/test_cards.py::CardsTests::test_block_card_cli_all,,"37a38,41
>         from n26.cli import card_block
>         card_id_1 = '12345678-1234-abcd-abcd-1234567890ab'
>         card_id_2 = '22345678-1234-abcd-abcd-1234567890ab'
>         result = self._run_cli_cmd(card_block)
",python-n26/ipflakies_result/05403025/patch/test_cards_patch_8b1b2edf.patch
python-resource-container,https://github.com/unfoldingWord-dev/python-resource-container,64d87f900af969f47b20b798cf00c2861435b0d8,tests/container_test.py::TestResourceContainer::test_should_fail_to_load_missing_rc,brittle,tests/container_test.py::TestResourceContainer::test_not_opening_a_rc_that_is_too_old,,"126a127,130
>         directory = os.path.join(DATA_DIR, 'temp', 'old_rc')
>         manifest = {'dublin_core': {'type': 'book', 'conformsto': 'rc0.1', 'format': 'text/usfm', 'identifier': 'en-ulb', 'language': {'identifier': 'en', 'title': 'English', 'direction': 'ltr'}}, 'projects': []}
>         write_file(os.path.join(directory, 'manifest.yaml'), yaml.dump(manifest, default_flow_style=False))
>         rc = None
",python-resource-container/ipflakies_result/b6db977b/patch/container_test_patch_d0884409.patch
python-resource-container,https://github.com/unfoldingWord-dev/python-resource-container,64d87f900af969f47b20b798cf00c2861435b0d8,tests/container_test.py::TestResourceContainer::test_should_load_a_missing_rc_when_not_in_strict_mode,brittle,tests/container_test.py::TestResourceContainer::test_not_opening_a_rc_that_is_too_old,,"135a136,139
>         directory = os.path.join(DATA_DIR, 'temp', 'old_rc')
>         manifest = {'dublin_core': {'type': 'book', 'conformsto': 'rc0.1', 'format': 'text/usfm', 'identifier': 'en-ulb', 'language': {'identifier': 'en', 'title': 'English', 'direction': 'ltr'}}, 'projects': []}
>         write_file(os.path.join(directory, 'manifest.yaml'), yaml.dump(manifest, default_flow_style=False))
>         rc = None
",python-resource-container/ipflakies_result/2e445752/patch/container_test_patch_d0884409.patch
pythondi,https://github.com/teamhide/pythondi,913e6a60fc5d02c3db385ad322f970ecec36969b,tests/test_configure.py::test_configure,victim,tests/test_configure.py::test_configure_after_clear,tests/test_container.py::test_clear,"12a13
>     Container.clear()
",pythondi/ipflakies_result/f6d8941f/patch/test_configure_patch_5895f9cd.patch
pytm,https://github.com/izar/pytm,724df0c6346706e9c3678bee11e23d9609d8fa4c,tests/test_private_func.py::TestMethod::test_defaults,victim,tests/test_pytmfunc.py::TestTM::test_seq_unused,tests/test_pytmfunc.py::TestTM::test_dfd_duplicates_raise,"151a152
>         TM.reset()
",pytm/ipflakies_result/af37a956/patch/test_private_func_patch_9a2498af.patch
pytm,https://github.com/izar/pytm,724df0c6346706e9c3678bee11e23d9609d8fa4c,tests/test_private_func.py::TestUniqueNames::test_duplicate_boundary_names_have_different_unique_names,victim,tests/test_pytmfunc.py::TestTM::test_seq_unused,tests/test_pytmfunc.py::TestTM::test_dfd_duplicates_raise,"10a11
>         TM.reset()
",pytm/ipflakies_result/7390b6a9/patch/test_private_func_patch_9a2498af.patch
redisqueue,https://github.com/DevKeh/redisqueue,feac4dfc30837e0ab1a55a8479443ea74b2793f2,tests/test_redisqueue.py::test_mock_queue_get_put_same_task,brittle,tests/test_redisqueue.py::test_mock_queue_connection,,"100a101
>     mock_queue.connect()
",redisqueue/ipflakies_result/da597172/patch/test_redisqueue_patch_5d1cbb53.patch
redisqueue,https://github.com/DevKeh/redisqueue,feac4dfc30837e0ab1a55a8479443ea74b2793f2,tests/test_redisqueue.py::test_mock_queue_put_get,brittle,tests/test_redisqueue.py::test_mock_queue_connection,,"61a62
>     mock_queue.connect()
",redisqueue/ipflakies_result/6a9bdfc0/patch/test_redisqueue_patch_5d1cbb53.patch
redisqueue,https://github.com/DevKeh/redisqueue,feac4dfc30837e0ab1a55a8479443ea74b2793f2,tests/test_redisqueue.py::test_mock_queue_unique,brittle,tests/test_redisqueue.py::test_mock_queue_connection,,"77a78
>     mock_queue.connect()
",redisqueue/ipflakies_result/8fa45a09/patch/test_redisqueue_patch_5d1cbb53.patch
regex4ocr,https://github.com/juntossomosmais/regex4ocr,9f96e9c6fe6ffc3e1452b23103fdfa6a0f1dcede,tests/integration/test_type_casting.py::test_validate_types_removal,brittle,tests/integration/test_type_casting.py::test_validate_types_no_removal,,"298a299
>     validate_types(extracted_data_dict_1, drm_model_tax_coupon_with_inline_groups)
",regex4ocr/ipflakies_result/686fe26e/patch/test_type_casting_patch_ce55ad46.patch
riemann,https://github.com/summa-tx/riemann,0fda32e783487572c869aaabc6af7adba01cbd00,riemann/tests/encoding/test_addresses.py::TestAddresses::test_make_p2sh_address_msig,victim,riemann/tests/tx/test_overwinter.py::OverwinterSighash::test_hash_joinsplits,riemann/tests/tx/test_decred.py::TestDecredByteData::test_init_error,"31a32
>         riemann.select_network('bitcoin_main')
",riemann/ipflakies_result/124142a4/patch/test_addresses_patch_cc497833.patch
riemann,https://github.com/summa-tx/riemann,0fda32e783487572c869aaabc6af7adba01cbd00,riemann/tests/test_simple.py::TestSimple::test_unsigned_witness_tx,victim,riemann/tests/tx/test_overwinter.py::OverwinterSighash::test_hash_joinsplits,riemann/tests/tx/test_tx_builder.py::TestTxBuilder::test_make_pkh_output_script,"65a66
>         riemann.select_network('bitcoin_cash_main')
",riemann/ipflakies_result/96e46b84/patch/test_simple_patch_ed07eda2.patch
riemann,https://github.com/summa-tx/riemann,0fda32e783487572c869aaabc6af7adba01cbd00,riemann/tests/tx/test_tx_builder.py::TestTxBuilder::test_make_pkh_output_script,victim,riemann/tests/tx/test_overwinter.py::OverwinterSighash::test_hash_joinsplits,riemann/tests/tx/test_decred.py::TestDecredByteData::test_init_error,"36a37
>         riemann.select_network('bitcoin_main')
",riemann/ipflakies_result/27de7678/patch/test_tx_builder_patch_cc497833.patch
securenative-python,https://github.com/securenative/securenative-python,0eae99733b7565341487ad32f044be8dc51032cd,tests/configuration_manager_test.py::ConfigurationManagerTest::test_default_values_for_invalid_enum_config_props,victim,tests/configuration_manager_test.py::ConfigurationManagerTest::test_get_config_from_env_variables,tests/configuration_manager_test.py::ConfigurationManagerTest::test_handle_invalid_config_file,"236a237,254
>             del os.environ['SECURENATIVE_API_KEY']
>             del os.environ['SECURENATIVE_API_URL']
>             del os.environ['SECURENATIVE_INTERVAL']
>             del os.environ['SECURENATIVE_MAX_EVENTS']
>             del os.environ['SECURENATIVE_TIMEOUT']
>             del os.environ['SECURENATIVE_AUTO_SEND']
>             del os.environ['SECURENATIVE_DISABLE']
>             del os.environ['SECURENATIVE_LOG_LEVEL']
>             del os.environ['SECURENATIVE_FAILOVER_STRATEGY']
>         except FileNotFoundError:
>             pass
>         except KeyError:
>             pass
>         config = {'bla': 'bla'}
>         self.create_ini_file(config)
>         options = ConfigurationManager.load_config(None)
>         try:
>             os.remove(self.config_file_path)
",securenative-python/ipflakies_result/4753ddcd/patch/configuration_manager_test_patch_b2dc9c4e.patch
securenative-python,https://github.com/securenative/securenative-python,0eae99733b7565341487ad32f044be8dc51032cd,tests/configuration_manager_test.py::ConfigurationManagerTest::test_get_config_from_env_variables,brittle,tests/configuration_manager_test.py::ConfigurationManagerTest::test_default_values_for_invalid_enum_config_props,,"194a195,196
>         config = {'SECURENATIVE_FAILOVER_STRATEGY': 'fail-something'}
>         self.create_ini_file(config)
",securenative-python/ipflakies_result/4bacd6a2/patch/configuration_manager_test_patch_acf197d5.patch
securenative-python,https://github.com/securenative/securenative-python,0eae99733b7565341487ad32f044be8dc51032cd,tests/configuration_manager_test.py::ConfigurationManagerTest::test_ignore_unknown_config_in_properties_file,victim,tests/configuration_manager_test.py::ConfigurationManagerTest::test_get_config_from_env_variables,tests/configuration_manager_test.py::ConfigurationManagerTest::test_default_values_for_invalid_enum_config_props,"78a79,80
>         config = {'SECURENATIVE_FAILOVER_STRATEGY': 'fail-something'}
>         self.create_ini_file(config)
",securenative-python/ipflakies_result/488b51a9/patch/configuration_manager_test_patch_acf197d5.patch
securenative-python,https://github.com/securenative/securenative-python,0eae99733b7565341487ad32f044be8dc51032cd,tests/configuration_manager_test.py::ConfigurationManagerTest::test_load_default_config,brittle,tests/configuration_manager_test.py::ConfigurationManagerTest::test_ignore_unknown_config_in_properties_file,,"163a164,167
>         config = {'SECURENATIVE_TIMEOUT': '1500', 'SECURENATIVE_UNKNOWN_KEY': 'SOME_UNKNOWN_KEY'}
>         self.create_ini_file(config)
>         options = ConfigurationManager.load_config(None)
>         self.assertEqual(options.timeout, '1500')
",securenative-python/ipflakies_result/c00abcc5/patch/configuration_manager_test_patch_7c4c6ce6.patch
securenative-python,https://github.com/securenative/securenative-python,0eae99733b7565341487ad32f044be8dc51032cd,tests/configuration_manager_test.py::ConfigurationManagerTest::test_parse_config_file_correctly,victim,tests/configuration_manager_test.py::ConfigurationManagerTest::test_get_config_from_env_variables,tests/configuration_manager_test.py::ConfigurationManagerTest::test_default_values_for_invalid_enum_config_props,"32a33,34
>         config = {'SECURENATIVE_FAILOVER_STRATEGY': 'fail-something'}
>         self.create_ini_file(config)
",securenative-python/ipflakies_result/c48fa61f/patch/configuration_manager_test_patch_acf197d5.patch
serpextract,https://github.com/Parsely/serpextract,aec8f2bd79c66953938569a24b05c693ab70b4ce,tests/test_serps.py::TestSERPs::test_custom_parser_implicit,brittle,tests/test_serps.py::TestSERPs::test_custom_parser_explicit,,"105a106
>         self.assertInvalidSERP(self.custom_serp_url)
",serpextract/ipflakies_result/535478e1/patch/test_serps_patch_cc5ab116.patch
serpextract,https://github.com/Parsely/serpextract/,aec8f2bd79c66953938569a24b05c693ab70b4ce,tests/test_serps.py::TestSERPs::test_custom_parser_implicit,brittle,tests/test_serps.py::TestSERPs::test_custom_parser_explicit,,"105a106
>         self.assertInvalidSERP(self.custom_serp_url)
",serpextract/ipflakies_result/535478e1/patch/test_serps_patch_cc5ab116.patch
skillful,https://github.com/bmweiner/skillful,8646f54faf62cb63f165f7699b8ace5b4a08233c,skillful/tests/test_controller.py::TestSkill::test_process,victim,skillful/tests/test_controller.py::TestSkill::test_process_invalid1,skillful/tests/test_interface.py::TestBody::test___len__,"98a99
>         'Test __len__ method.'
",skillful/ipflakies_result/242b4dc0/patch/test_controller_patch_103938de.patch
skillful,https://github.com/bmweiner/skillful,8646f54faf62cb63f165f7699b8ace5b4a08233c,skillful/tests/test_controller.py::TestSkill::test_process_end,victim,skillful/tests/test_controller.py::TestSkill::test_process_invalid1,skillful/tests/test_interface.py::TestBody::test___len__,"123a124
>         'Test __len__ method.'
",skillful/ipflakies_result/d91daa38/patch/test_controller_patch_103938de.patch
stowage,https://github.com/michaelpb/stowage,7c619be755b9b73fd202367bcf9014472f318834,test/test_stowage.py::TestPathGenerators::test_directory_walk,victim,test/test_stowage.py::TestPathGenerators::test_partially_needed_symlink_walk,test/test_stowage.py::TestParseArgs::test_parse_args_default,"151a152
>         args = stowage.parse_args([])
",stowage/ipflakies_result/71f24514/patch/test_stowage_patch_b1ff49e9.patch
stowage,https://github.com/michaelpb/stowage,7c619be755b9b73fd202367bcf9014472f318834,test/test_stowage.py::TestPathGenerators::test_needed_symlink_walk,victim,test/test_stowage.py::TestPathGenerators::test_partially_needed_symlink_walk,test/test_stowage.py::TestParseArgs::test_parse_args_default,"157a158
>         args = stowage.parse_args([])
",stowage/ipflakies_result/d32b1152/patch/test_stowage_patch_b1ff49e9.patch
skipper,https://github.com/Stratoscale/skipper,dde3194bf6cf227b30c6e54b18c37317d2e0647e,tests/test_cli.py::TestCLI::test_make_without_build_container_tag,victim,tests/test_cli.py::TestCLI::test_run_interactive_from_environment,tests/test_cli.py::TestCLI::test_run_non_interactive_from_environment,"1483a1484
>         os.environ['SKIPPER_INTERACTIVE'] = 'False'
",skipper/ipflakies_result/995791a4/patch/test_cli_patch_7945f1d4.patch
skipper,https://github.com/Stratoscale/skipper,dde3194bf6cf227b30c6e54b18c37317d2e0647e,tests/test_cli.py::TestCLI::test_run_without_build_container_tag,victim,tests/test_cli.py::TestCLI::test_run_interactive_from_environment,tests/test_cli.py::TestCLI::test_run_non_interactive_from_environment,"1264a1265
>         os.environ['SKIPPER_INTERACTIVE'] = 'False'
",skipper/ipflakies_result/87543e6c/patch/test_cli_patch_7945f1d4.patch
skipper,https://github.com/Stratoscale/skipper,dde3194bf6cf227b30c6e54b18c37317d2e0647e,tests/test_cli.py::TestCLI::test_run_without_build_container_tag_cached,victim,tests/test_cli.py::TestCLI::test_run_interactive_from_environment,tests/test_cli.py::TestCLI::test_run_non_interactive_from_environment,"1284a1285
>         os.environ['SKIPPER_INTERACTIVE'] = 'False'
",skipper/ipflakies_result/b2ad69e4/patch/test_cli_patch_7945f1d4.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node0-expected_node0],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/48a9d66c/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node1-expected_node1],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/fa2f61f4/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node10-expected_node10],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/c1a39caa/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node2-expected_node2],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/0e91aa40/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node3-expected_node3],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/cd295545/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node4-expected_node4],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/93265655/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node5-expected_node5],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/7c7ada20/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node6-expected_node6],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/127a8c1c/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node7-expected_node7],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/dce0f18b/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node8-expected_node8],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/90b2f5c6/patch/test_org_to_asana_patch_7de223ac.patch
todo-sync,https://github.com/tmurph/todo-sync,32915e9a1509aa2c4083613e256cb0d502c441aa,tests/test_org_to_asana.py::test_o2a_behind_make_fn[a_node9-expected_node9],brittle,tests/test_org_to_asana.py::test_o2a_behind_get_tree,,"127a128
>     behind_source.get_tree()
",todo-sync/ipflakies_result/3d07fe6c/patch/test_org_to_asana_patch_7de223ac.patch
torchpwl,https://github.com/PiotrDabkowski/torchpwl,73b09cfa9f4c173988d8f075485b887c694fc5a8,torchpwl/pwl_test.py::test_pwl_default_init_response[7-3-MonoPointPWL],victim,torchpwl/pwl_test.py::test_pwl_sloped_correct_num_breakpoints[1-3-SlopedPWL],torchpwl/pwl_test.py::test_pwl_init[1-1-PointPWL],"31a32
>     x = get_x(num_channels)
",torchpwl/ipflakies_result/a2e9ca16/patch/pwl_test_patch_10293034.patch
tornado-swirl,https://github.com/rduldulao/tornado-swirl,b8df27efc3d7fd0dce0f0290767c94ac2e747311,tests/test_swirl.py::TestSampleEndpoints::test_security_scheme1,brittle,tests/test_schema.py::TestSampleEndpoints2::test_simple_1,,"613a614,616
> 
>         @swirl.schema
>         class A(object):
",tornado-swirl/ipflakies_result/43edd2ec/patch/test_swirl_patch_b118a402.patch
tornado-swirl,https://github.com/rduldulao/tornado-swirl,b8df27efc3d7fd0dce0f0290767c94ac2e747311,tests/test_swirl.py::TestSampleEndpoints::test_security_scheme2,brittle,tests/test_schema.py::TestSampleEndpoints2::test_simple_1,,"656a657,659
> 
>         @swirl.schema
>         class A(object):
",tornado-swirl/ipflakies_result/1e1edd23/patch/test_swirl_patch_b118a402.patch
tunacell,https://github.com/LeBarbouze/tunacell,837d57e1e6caeddf2e6bcdd2db2986fb456dd605,tunacell/tests/test_observable.py::test_observable_str,brittle,tunacell/tests/test_observable.py::test_observable_init,,"67a68,71
>     for kwargs in all_params:
>         obs = Observable(**kwargs)
>         for attr in obs._attr_names:
>             assert (getattr(obs, attr) == kwargs[attr])
",tunacell/ipflakies_result/81c51b7b/patch/test_observable_patch_8ef40b9d.patch
ucal,https://github.com/timkostka/ucal,df0ccbc5f8af54fc69df56191bd810481a17b0e3,tests/test_ucal.py::TestSyntax::test_function_ln,brittle,tests/test_ucal.py::TestSyntax::test_binary_conversion,,"248a249
>         self.assertEqual(ucal.interpret('67 in bin'), '0b1000011')
",ucal/ipflakies_result/65d8ffc1/patch/test_ucal_patch_f6bda7ce.patch
ucal,https://github.com/timkostka/ucal,df0ccbc5f8af54fc69df56191bd810481a17b0e3,tests/test_ucal.py::TestSyntax::test_function_log,brittle,tests/test_ucal.py::TestSyntax::test_binary_conversion,,"254a255
>         self.assertEqual(ucal.interpret('67 in bin'), '0b1000011')
",ucal/ipflakies_result/02c71803/patch/test_ucal_patch_f6bda7ce.patch
wopmars,https://github.com/aitgon/wopmars,33680f94163d82ce43557cf7f87a5f9ead496fdc,wopmars/tests/test_wopmars.py::TestWopmars::test_dry_run,victim,wopmars/tests/test_tool_wrapper_thread.py::TestToolWrapperThread::test_run,wopmars/tests/test_wopmars.py::TestWopmars::test_run_skipping_steps_time_check,"201a202,210
>         cmd_line = ['python', '-D', self.__db_url, '-w', self.__example_def_file2_only_files, '-v']
>         (time_unix_ms, time_human) = get_current_time()
>         start = time_unix_ms
>         with self.assertRaises(SystemExit):
>             WopMars().run(cmd_line)
>         (time_unix_ms, time_human) = get_current_time()
>         end = time_unix_ms
>         runtime1 = (end - start)
>         PathManager.unlink('outdir/output_file1.txt')
",wopmars/ipflakies_result/83c61c06/patch/test_wopmars_patch_153201c2.patch
yamicache,https://github.com/mtik00/yamicache,1109d08b18be94bdee55e113309f7be29f25d840,tests/test_class.py::test_cached,victim,tests/test_class.py::test_timeout,tests/test_class.py::test_keyed_cached,"45a46,52
>         cache_obj.test3(8, 0)
>     cache_obj.test4()
>     assert (len(c) == 1)
>     key = list(c.keys())[0]
>     assert (key == 'asdf')
>     c.clear()
>     for _ in range(10):
",yamicache/ipflakies_result/8adab9c3/patch/test_class_patch_a84ee92e.patch
yamicache,https://github.com/mtik00/yamicache,1109d08b18be94bdee55e113309f7be29f25d840,tests/test_class.py::test_keyed_cached,victim,tests/test_class.py::test_prefix,tests/test_class.py::test_counters,"64a65
>     c._debug = True
",yamicache/ipflakies_result/801e97bc/patch/test_class_patch_26539b99.patch
yamicache,https://github.com/mtik00/yamicache,1109d08b18be94bdee55e113309f7be29f25d840,tests/test_class.py::test_utility,victim,tests/test_class.py::test_prefix,tests/test_class.py::test_counters,"82a83
>     c._debug = True
",yamicache/ipflakies_result/68343008/patch/test_class_patch_26539b99.patch
